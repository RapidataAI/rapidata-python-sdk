name: Release and Publish
on:
  workflow_dispatch:
    inputs:
      version_part:
        description: 'Version part to bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Configure Git
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
    
    - name: Update version
      id: update_version
      run: |
        old_version=$(poetry version -s)
        poetry version ${{ github.event.inputs.version_part }}
        new_version=$(poetry version -s)
        echo "new_version=$new_version" >>$GITHUB_OUTPUT
        echo "old_version=$old_version" >>$GITHUB_OUTPUT
    
    - name: Update version in Python code
      run: |
        python3 << 'EOF'
        import re
        import sys
        
        version = "${{ steps.update_version.outputs.new_version }}"
        
        # Update __init__.py
        init_file = "src/rapidata/__init__.py"
        try:
            with open(init_file, 'r') as f:
                content = f.read()
            
            # Replace __version__ = "..." with new version
            content = re.sub(r'__version__\s*=\s*["\'][^"\']*["\']', f'__version__ = "{version}"', content)
            
            with open(init_file, 'w') as f:
                f.write(content)
            print(f"Updated {init_file} with version {version}")
        except FileNotFoundError:
            print(f"File {init_file} not found, creating it...")
            with open(init_file, 'w') as f:
                f.write(f'__version__ = "{version}"\n')
        EOF
    
    - name: Commit and push changes
      run: |
        git add pyproject.toml rapidata/__init__.py
        git commit -m "Bump version from ${{ steps.update_version.outputs.old_version }} to ${{ steps.update_version.outputs.new_version }}"
        git push
    
    - name: Create and push tag
      run: |
        git tag v${{ steps.update_version.outputs.new_version }}
        git push origin v${{ steps.update_version.outputs.new_version }}
    
    - name: Build and publish
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry config pypi-token.pypi $PYPI_TOKEN
        poetry build
        poetry publish
    - name: List dist contents
      run: ls -l dist/
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.update_version.outputs.new_version }}
        name: Release v${{ steps.update_version.outputs.new_version }}
        files: |
          dist/*.whl
          dist/*.tar.gz
