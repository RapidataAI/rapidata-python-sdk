{
  "openapi": "3.0.3",
  "info": {
    "title": "Rapidata.Dataset",
    "version": "v1"
  },
  "security": [
    {
      "bearer": []
    },
    {
      "oauth2": [
        "openid",
        "profile",
        "email"
      ]
    }
  ],
  "paths": {
    "/datapoint/{datapointId}": {
      "get": {
        "tags": [
          "Datapoint"
        ],
        "summary": "Gets a datapoint by its id.",
        "parameters": [
          {
            "name": "datapointId",
            "in": "path",
            "description": "The id of the datapoint to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatapointByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatapointByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatapointByIdResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Datapoint"
        ],
        "summary": "Deletes a datapoint by its id.",
        "parameters": [
          {
            "name": "datapointId",
            "in": "path",
            "description": "The id of the datapoint to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/dataset/{datasetId}": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Gets a dataset by its id.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Gets all datapoints of a dataset.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to get the datapoints of.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "The query model to filter, sort, and paginate the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointModelPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointModelPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointModelPagedResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Creates a new datapoint from multiple possible sources.",
        "description": "Multiple files, texts, and urls can be provided.\nIf multiple files are provided, a multi-asset datapoint will be created,\nmeaning that all sources provided will be stored as sub-assets of the datapoint.\n            \nIf multiple datapoints are desired, one should not pass in multiple files, texts, or urls,\ninstead, one should call this endpoint multiple times with the desired file, text, or url per datapoint.\n            \nThe request must be a multipart form request, where each parameter is sent as a separate part.\nThe files, texts, and urls can be mixed and matched as needed, however, at least one of them must be provided,\nand one should make sure that mixing them makes sense for the dataset.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "promptAsset": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "text": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The texts to upload. The length limit is set at 256 characters per text."
                  },
                  "url": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Creates an asset from a url. The url needs to point to a publicly accessible resource.\nThe server will download the resource and store it as an asset in the background.\n<remarks>\n    Additionally, to the urls having to be publicly accessible, they need to support HTTP HEAD requests.\n</remarks>"
                  },
                  "metadata": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PrivateTextMetadataInput"
                        },
                        {
                          "$ref": "#/components/schemas/PromptAssetMetadataInput"
                        },
                        {
                          "$ref": "#/components/schemas/PromptMetadataInput"
                        },
                        {
                          "$ref": "#/components/schemas/PublicTextMetadataInput"
                        },
                        {
                          "$ref": "#/components/schemas/TranscriptionMetadataInput"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "_t"
                      }
                    },
                    "description": "Optional metadata to attach to the datapoint."
                  },
                  "sortIndex": {
                    "type": "integer",
                    "description": "The index will be used to keep the datapoints in order. Useful if upload is parallelized",
                    "format": "int64"
                  }
                }
              },
              "encoding": {
                "promptAsset": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "file": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "text": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "url": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "metadata": {
                  "contentType": "application/json",
                  "style": "form",
                  "explode": true
                },
                "sortIndex": {
                  "contentType": "int64",
                  "style": "form",
                  "explode": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/progress": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Gets the upload progress of a dataset.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to get the progress of.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetProgressResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetProgressResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetProgressResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/failed": {
      "get": {
        "tags": [
          "Dataset"
        ],
        "summary": "Gets a list of all datapoints that failed to upload.",
        "description": "A datapoint usually fails to upload when using a deferred upload mechanism such as when providing a URL\nand the URL is not accessible.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to get the failed datapoints of.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFailedDatapointsResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFailedDatapointsResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFailedDatapointsResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/files": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Creates a single datapoint by uploading files.",
        "description": "If multiple files are uploaded, a multi asset datapoint will be created.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to create the datapoint in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "model": {
                    "$ref": "#/components/schemas/CreateDatapointFromFilesModel"
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                },
                "model": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/texts": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Creates a single datapoint from text sources.",
        "description": "If multiple text sources are uploaded, a multi asset datapoint will be created.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to create the datapoint in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromTextSourcesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromTextSourcesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromTextSourcesModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/urls": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Creates a single datapoint where the assets are fetched from the specified urls.",
        "description": "Passing in multiple urls will create a single datapoint with a MultiAsset.\nEach url will be fetched and stored as a sub-asset of the MultiAsset.\n<para />\nIf any of the urls are not accessible, the request will fail.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to create the datapoint in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromUrlsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromUrlsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointFromUrlsModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatapointResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/s3": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Uploads files from an S3 bucket to a dataset.",
        "description": "A new datapoint will be created for each file in the bucket.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to upload the files to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointsFromS3BucketModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointsFromS3BucketModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatapointsFromS3BucketModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFromS3Result"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFromS3Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFromS3Result"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/datapoints/csv": {
      "post": {
        "tags": [
          "Dataset"
        ],
        "summary": "Creates multiple datapoints from a csv.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to import the datapoints to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The csv file to import.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportFromFileResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportFromFileResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportFromFileResult"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{datasetId}/name": {
      "patch": {
        "tags": [
          "Dataset"
        ],
        "summary": "Updates the name of a dataset.",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "The id of the dataset to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatasetNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatasetNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatasetNameModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "summary": "Submits feedback about our services.",
        "requestBody": {
          "description": "The body content of the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Queries orders based on a filter, page, and sort criteria.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "description": "The parameters for filtering, paging, and sorting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderModelPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/orders/public": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves orders that are public and can be cloned by any user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPublicOrdersResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPublicOrdersResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPublicOrdersResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves an order by its id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderByIdResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Deletes an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/results": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Aggregates the results of an order and returns the result as a json body.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/order/{orderId}/download-results": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Aggregates the results of an order and returns it as a file attachment.",
        "description": "Returns the aggregated result as a file with a given name.\nThe annotated type of the response represents the content type of the file.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Used to create a new order.",
        "requestBody": {
          "description": "The body request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/complex": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Creates a new order with a custom pipeline.",
        "requestBody": {
          "description": "The body content of the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComplexOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComplexOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComplexOrderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComplexOrderResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComplexOrderResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComplexOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/unsupported": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Notifies the admins that a user wants to create an order with an unsupported label type or data type.",
        "requestBody": {
          "description": "The body content of the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnsupportedOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnsupportedOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnsupportedOrderModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/clone": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Clones an existing order.",
        "description": "In order to clone an order, the existing order must be marked as public.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to clone",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body content of the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CloneOrderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CloneOrderResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloneOrderResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloneOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/{orderId}/unlock": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Unlocks a newly cloned order.",
        "description": "When an order is cloned only the necessary information is copied.\nIn order to make changes to the order, it must be unlocked first.\nUnlocking the order will clone the entire dataset and its datapoints.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to unlock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockOrderResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockOrderResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockOrderResult"
                }
              }
            }
          }
        }
      }
    },
    "/order/{orderId}/demo": {
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Updates whether an order is a demo or not.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDemo",
            "in": "query",
            "description": "Whether to mark or unmark the order as a demo",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order/{orderId}/share": {
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Updates whether an order is public or not.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPublic",
            "in": "query",
            "description": "Whether to mark or unmark the order as public",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order/{orderId}/submit": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Submits an order for approval.",
        "description": "Once an order is created its order id and dataset id is returned.\nThe dataset id can be used to fill the dataset with data points.\nOnce submitted, the order will be locked and no further changes can be made.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to submit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing additional information for the submission.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitOrderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order/{orderId}/approve": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Approves an order that has been submitted for manual approval.",
        "description": "An order is submitted for manual approval when the automatic approval process could not automatically\ndetermine if the order is safe to process.\nOnce an order is approved, the pipeline will start processing the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/name": {
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Updates the name of an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body content of the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderNameModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/retry": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Retries a failed order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to retry",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/pause": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Pauses an order that is processing. Meaning all campaigns in the order will be paused.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to pause",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/order/{orderId}/preview": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Puts the order into preview mode, where one can inspect what our labelers receive.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to submit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing additional information for the preview.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewOrderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order/{orderId}/resume": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Resumes a paused order. Meaning all campaigns in the order will be resumed.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The id of the order to resume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/clients": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Queries the clients for the current customer.",
        "description": "A client allows a customer to authenticate with the APIs without using their own credentials.\nThis is useful for creating service accounts or other automated processes,\nas when using the Rapidata Python SDK.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsQueryResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsQueryResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsQueryResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/client/{clientId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Gets a specific client by its ID.",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The ID of the client to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Deletes a customers' client.",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/client": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Creates a new client for the current customer.",
        "requestBody": {
          "description": "The model for creating a new client.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerClientResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerClientResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerClientResult"
                }
              }
            }
          }
        }
      }
    },
    "/client/register": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Registers a new client dynamically.",
        "description": "The implementation of this method follows the OpenID Connect Dynamic Client Registration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicClientRegistrationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicClientRegistrationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicClientRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientModel"
                }
              }
            }
          }
        }
      }
    },
    "/identity/temporary": {
      "post": {
        "tags": [
          "Identity"
        ],
        "summary": "Registers and logs in a temporary customer.",
        "requestBody": {
          "description": "The model to register the temporary customer with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterTemporaryCustomerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterTemporaryCustomerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterTemporaryCustomerModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterTemporaryCustomerResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterTemporaryCustomerResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterTemporaryCustomerResult"
                }
              }
            }
          }
        }
      }
    },
    "/identity/bridge-token": {
      "post": {
        "tags": [
          "Identity"
        ],
        "summary": "Creates a pair of read and write keys for a client.\nThe write key is used to store the authentication result.\nThe read key is used to retrieve the authentication result.",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "The client ID to create the keys for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBridgeTokenResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBridgeTokenResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBridgeTokenResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Tries to read the bridge token keys for a given read key.\nThe read key is used to retrieve the authentication result written by the write key.",
        "parameters": [
          {
            "name": "readKey",
            "in": "query",
            "description": "The read key to read the bridge token keys for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReadBridgeTokenKeysResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadBridgeTokenKeysResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadBridgeTokenKeysResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotAvailableYetResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAvailableYetResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAvailableYetResult"
                }
              }
            }
          }
        }
      }
    },
    "/identity/referrer": {
      "post": {
        "tags": [
          "Identity"
        ],
        "summary": "Sets the referrer for the current customer.",
        "parameters": [
          {
            "name": "referrer",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/identity/google-one-tap": {
      "post": {
        "tags": [
          "Identity"
        ],
        "summary": "Signs in a user using a token received from Google One Tap.",
        "requestBody": {
          "description": "The body of the request containing the id token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleOneTapLoginModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleOneTapLoginModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleOneTapLoginModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/newsletter/subscribe": {
      "post": {
        "tags": [
          "Newsletter"
        ],
        "summary": "Signs a user up to the newsletter.",
        "requestBody": {
          "description": "The model containing the email of a user and recaptcha token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/newsletter/unsubscribe": {
      "post": {
        "tags": [
          "Newsletter"
        ],
        "summary": "Unsubscribes a user from the newsletter.",
        "requestBody": {
          "description": "The model containing the email of a user and recaptcha token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Rapidata.Identity.API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/connect/userinfo": {
      "get": {
        "tags": [
          "UserInfo"
        ],
        "summary": "Retrieves information about the authenticated user.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/coco": {
      "post": {
        "tags": [
          "Coco"
        ],
        "summary": "Uploads a CoCo set to the system.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Title": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Title": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCocoResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCocoResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCocoResult"
                }
              }
            }
          }
        }
      }
    },
    "/coco/{cocoSetId}/submit": {
      "post": {
        "tags": [
          "Coco"
        ],
        "summary": "Creates a new validation set based on a previously uploaded CoCo set.",
        "parameters": [
          {
            "name": "cocoSetId",
            "in": "path",
            "description": "The ID of the CoCo set to use for validation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the information needed to create the validation set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitCocoModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitCocoModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitCocoModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitCocoResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitCocoResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitCocoResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-sets": {
      "get": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Queries validation sets based on the provided filter, paging and sorting criteria.",
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "description": "The model containing the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationSetModelPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationSetModelPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationSetModelPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/{validationSetId}": {
      "delete": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Gets a validation set by the id.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The id of the validation set to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Gets a validation set by the id.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The id of the validation set to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationSetByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationSetByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationSetByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-sets/available": {
      "get": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Gets the available validation sets for the current user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableValidationSetsResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableValidationSetsResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableValidationSetsResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Creates a new empty validation set.",
        "requestBody": {
          "description": "The body request for creating a new validation set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateValidationSetModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateValidationSetModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateValidationSetModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmptyValidationSetResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmptyValidationSetResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmptyValidationSetResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/{validationSetId}/rapids": {
      "get": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Queries the validation rapids for a specific validation set.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The validation set to query.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "The request formatted as a JSON in the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationRapidsResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationRapidsResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidationRapidsResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/{validationSetId}/rapid": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Adds a new validation rapid to the specified validation set using files to create the assets.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The ID of the validation set to add the rapid to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "$ref": "#/components/schemas/AddValidationRapidModel"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The texts to use for the rapid."
                  },
                  "urls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    },
                    "description": "The urls to use for the rapid"
                  }
                }
              },
              "encoding": {
                "files": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "texts": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "urls": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/{validationSetId}/rapid/files": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Adds a new validation rapid to the specified validation set using files to create the assets.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The ID of the validation set to add the rapid to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "$ref": "#/components/schemas/AddValidationRapidModel"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "model": {
                  "style": "form"
                },
                "files": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/validation-set/{validationSetId}/rapid/texts": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Adds a new validation rapid to the specified validation set using text sources to create the assets.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The ID of the validation set to add the rapid to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the information needed to add the validation rapid.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddValidationTextRapidModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddValidationTextRapidModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddValidationTextRapidModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddValidationRapidResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/validation-set/zip": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Imports a validation set from a zip file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Blueprint": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TranscriptionRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/ScrubRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/PolygonRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/NamedEntityRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/LocateRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/LineRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/FreeTextRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/CompareRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/AttachCategoryRapidBlueprint"
                      },
                      {
                        "$ref": "#/components/schemas/BoundingBoxRapidBlueprint"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "_t"
                    }
                  }
                }
              },
              "encoding": {
                "Blueprint": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/zip/compare": {
      "post": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Imports a compare validation set from a zip file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Criteria": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Criteria": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportValidationSetFromFileResult"
                }
              }
            }
          }
        }
      }
    },
    "/validation-set/{validationSetId}/dimensions": {
      "put": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Updates the dimensions of all rapids within a validation set.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The Id of the validation set to update the dimensions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request for updating the dimensions.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Updates the dimensions of all rapids within a validation set.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The Id of the validation set to update the dimensions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request for updating the dimensions.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDimensionsModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/validation-set/{validationSetId}/shouldalert": {
      "put": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Updates the  of all rapshouldAlert property of all rapids within a validation set.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The Id of the validation set to update the dimensions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request for updating the shouldAlert property.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Updates the dimensions of all rapids within a validation set.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "The Id of the validation set to update the dimensions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request for updating the shouldAlert property.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShouldAlertModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/validation-set/{validationSetId}/export": {
      "get": {
        "tags": [
          "ValidationSet"
        ],
        "summary": "Exports all rapids of a validation-set to a file.",
        "parameters": [
          {
            "name": "validationSetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rapids/flagged": {
      "get": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Allows querying all rapids that have been flagged.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "description": "The request to use to filter, sort and page the results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RapidModelPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RapidModelPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RapidModelPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/{rapidId}/responses": {
      "get": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Gets all responses for a given rapid.",
        "parameters": [
          {
            "name": "rapidId",
            "in": "path",
            "description": "The rapid to get the responses for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetRapidResponsesResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRapidResponsesResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRapidResponsesResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/demographic": {
      "post": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Creates a new Demographic Rapid.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "$ref": "#/components/schemas/CreateDemographicRapidModel"
                  },
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "model": {
                  "style": "form"
                },
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRapidResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRapidResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRapidResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/validation/{rapidId}": {
      "patch": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Updates the validation information of a Rapid.",
        "parameters": [
          {
            "name": "rapidId",
            "in": "path",
            "description": "The id of the rapid to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateValidationRapidModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateValidationRapidModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateValidationRapidModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/rapid/{rapidId}/unflag": {
      "post": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Unflags a flagged rapid.\nThis will add the rapid back to the active labeling pool and prevent it from being flagged again.",
        "parameters": [
          {
            "name": "rapidId",
            "in": "path",
            "description": "The id of the rapid to unflag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/rapid/{rapidId}": {
      "delete": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Deletes a rapid.",
        "parameters": [
          {
            "name": "rapidId",
            "in": "path",
            "description": "The rapid to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/rapid/{correlationId}/validation-potential": {
      "get": {
        "tags": [
          "CustomerRapid"
        ],
        "summary": "Queries rapids that are potentially eligible for validation set creation.",
        "parameters": [
          {
            "name": "CorrelationId",
            "in": "path",
            "description": "The correlation id of the rapids to query, usually a workflow id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Request",
            "in": "query",
            "description": "The query model containing the paging, filtering, and sorting information.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/QueryValidationModel"
            }
          },
          {
            "name": "MinResponses",
            "in": "query",
            "description": "The minimum number of responses a rapid should have to be considered eligible.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MinConfidence",
            "in": "query",
            "description": "The minimum confidence a rapid should have to be considered eligible.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "TargetGroupId",
            "in": "query",
            "description": "A specific subgroup of rapids to target.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialValidationRapidPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialValidationRapidPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialValidationRapidPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/rapid-bag/is-valid": {
      "get": {
        "tags": [
          "UserRapid"
        ],
        "summary": "Validates that the rapids associated with the current user are active.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AreRapidsActiveResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreRapidsActiveResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreRapidsActiveResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/response": {
      "post": {
        "tags": [
          "UserRapid"
        ],
        "summary": "Submits a response for a Rapid.",
        "requestBody": {
          "description": "The model containing the user guess.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RapidResultModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RapidResultModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RapidResultModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/skip": {
      "post": {
        "tags": [
          "UserRapid"
        ],
        "summary": "Skips a Rapid for the user.",
        "requestBody": {
          "description": "The model containing the Rapid to skip.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RapidSkippedModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RapidSkippedModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RapidSkippedModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserResponseResult"
                }
              }
            }
          }
        }
      }
    },
    "/rapid/{rapidId}/report": {
      "post": {
        "tags": [
          "UserRapid"
        ],
        "summary": "Used to report an issue with a rapid.",
        "parameters": [
          {
            "name": "rapidId",
            "in": "path",
            "description": "The rapid to report.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/rapid/report/{reportId}": {
      "get": {
        "tags": [
          "UserRapid"
        ],
        "summary": "Inspects a report's dump. Can be used to restore zustand state or anything alike.",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "The report id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InspectReportResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectReportResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectReportResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/compare/{workflowId}/results": {
      "get": {
        "tags": [
          "CompareWorkflow"
        ],
        "summary": "Get the result overview for a compare workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the results for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "The model for the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareWorkflowResultsModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareWorkflowResultsResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareWorkflowResultsResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareWorkflowResultsResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/evaluation/{workflowId}/results": {
      "get": {
        "tags": [
          "EvaluationWorkflow"
        ],
        "summary": "Get the results for an evaluation workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the results for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page.Index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page.Size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "States",
            "in": "query",
            "description": "An optional list of states to filter the rapids by.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RapidState"
              }
            }
          },
          {
            "name": "SortCriteria",
            "in": "query",
            "description": "A list of criteria to sort the results by.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortCriterion"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/simple/{workflowId}/results": {
      "get": {
        "tags": [
          "SimpleWorkflow"
        ],
        "summary": "Get the result overview for a simple workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the results for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "The model for the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSimpleWorkflowResultsModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResultsResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Queries workflows based on the provided filter, page, and sort criteria.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "description": "The model containing the filter, page, and sort criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IWorkflowModelPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IWorkflowModelPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IWorkflowModelPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{workflowId}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Get a workflow by its ID.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/progress": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Get the progress of a workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the progress for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowProgressResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowProgressResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowProgressResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/compare-ab-summary": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Calculates a summary of the results for a simple compare workflow.\nThe summary includes the number of times an asset at each index was the winner.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the summary for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useUserScore",
            "in": "query",
            "description": "Whether to use the user score to determine the winner.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareAbSummaryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareAbSummaryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompareAbSummaryResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/responses": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets the limit most recent or oldest responses for a workflow.\nThe responses are not guaranteed to be of any specific rapid.\nInstead, this endpoint returns all responses to any rapid in the workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The ID of the workflow to get the responses for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of responses to get.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Whether the oldest or most recent responses should be returned.",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetResponsesResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResponsesResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResponsesResult"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/delete": {
      "delete": {
        "tags": [
          "Workflow"
        ],
        "summary": "Deletes a workflow.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the workflow to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pipeline/{pipelineId}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Gets a pipeline by its id.",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "The id of the pipeline to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/{pipelineId}/campaign": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Adds a campaign to a pipeline.",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "The id of the pipeline to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCampaignModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCampaignModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddCampaignModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddCampaignArtifactResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCampaignArtifactResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCampaignArtifactResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Updates a specific campaign for a pipeline.",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "The id of the pipeline to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new campaign settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/pipeline/{pipelineId}/campaign/{artifactId}": {
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Updates a specific campaign for a pipeline.",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "The id of the pipeline to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artifactId",
            "in": "path",
            "description": "The id of the campaign artifact to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new campaign settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/pipeline/{id}/workflow-config": {
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Updates the workflow configuration for a pipeline.",
        "description": "This method needs to be called before the pipeline is started.\nOtherwise, the changes will not take effect unless the pipeline is restarted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the pipeline to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new workflow configuration.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/pipeline/{id}/workflow-config/{artifactId}": {
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Updates the workflow configuration for a pipeline.",
        "description": "This method needs to be called before the pipeline is started.\nOtherwise, the changes will not take effect unless the pipeline is restarted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the pipeline to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artifactId",
            "in": "path",
            "description": "The id of the workflow config artifact to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new workflow configuration.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompareWorkflowConfigModel"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleWorkflowConfigModel"
                  }
                ],
                "description": "The base configuration for a workflow.",
                "discriminator": {
                  "propertyName": "_t"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/pipeline/{pipelineId}/preliminary-download": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Initiates a preliminary download of the pipeline.",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "The id of the pipeline to initiate the download for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreliminaryDownloadModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PreliminaryDownloadModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PreliminaryDownloadModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreliminaryDownloadResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreliminaryDownloadResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreliminaryDownloadResult"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/preliminary-download/{preliminaryDownloadId}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Gets the preliminary download.",
        "description": "If it's still processing the request will return 202 Accepted.",
        "parameters": [
          {
            "name": "preliminaryDownloadId",
            "in": "path",
            "description": "The id of the preliminary download to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/campaign/monitor": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "The monitor endpoint is used to monitor the health of the service",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Queries orders based on a filter, page, and sort criteria.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "description": "The parameters for filtering, paging, and sorting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignQueryResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignQueryResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignQueryResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/campaign/{campaignId}/pause": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Pauses a campaign.",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "id of the campaign that should be paused",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/campaign/{campaignId}/resume": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Resumes a campaign.",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "id of the campaign that should be paused",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/campaign/boost/status": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Gets the status of the boost.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BoostQueryResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoostQueryResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoostQueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmarks": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Queries all benchmarks of the user.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkQueryResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkQueryResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkQueryResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmark": {
      "post": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Creates a benchmark",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmark/{benchmarkId}": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Returns a single benchmark by its ID.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetBenchmarkByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBenchmarkByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBenchmarkByIdResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Deletes a single benchmark.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/participants": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Query all participants within a benchmark",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantByBenchmarkPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantByBenchmarkPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantByBenchmarkPagedResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Creates a participant in a benchmark.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/participant/{participantId}": {
      "delete": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Deletes a participant on a benchmark.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "benchmarkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true
      }
    },
    "/benchmark/{benchmarkId}/name": {
      "put": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Updates the name of a benchmark.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBenchmarkNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBenchmarkNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBenchmarkNameModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/prompts": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Returns the paged prompts of a benchmark by its ID.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/prompt": {
      "post": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Adds a new prompt to a benchmark.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "The benchmark id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPromptModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPromptModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPromptModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/tags": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Query all tags within a benchmark",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "The id of the benchmark the prompts should be retrieved from",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagsByBenchmarkResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsByBenchmarkResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsByBenchmarkResult"
                }
              }
            }
          }
        }
      }
    },
    "/benchmark/{benchmarkId}/participants/{participantId}/submit": {
      "post": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Submits a participant to a benchmark.",
        "parameters": [
          {
            "name": "benchmarkId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/leaderboards": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Queries all leaderboards of the user.",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardQueryResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardQueryResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardQueryResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets a leaderboard by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetLeaderboardByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLeaderboardByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLeaderboardByIdResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Deletes a leaderboard by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "The id of the leaderboard that gets deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/name": {
      "put": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Updates the name of a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardNameModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/response-config": {
      "put": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Updates the response config of a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardResponseConfigModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardResponseConfigModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaderboardResponseConfigModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/leaderboard": {
      "post": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Creates a new leaderboard with the specified name and criteria.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaderboardModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaderboardModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaderboardModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLeaderboardResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLeaderboardResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLeaderboardResult"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/prompts": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "returns the paged prompts of a leaderboard by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptByBenchmarkResultPagedResult"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "adds a new prompt to a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "The leaderboard id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The prompt",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true
      }
    },
    "/leaderboard/{leaderboardId}/participants": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "queries all the participants connected to leaderboard by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StandingByLeaderboardPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandingByLeaderboardPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandingByLeaderboardPagedResult"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Creates a participant in a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBenchmarkParticipantModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBenchmarkParticipantResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/leaderboard/{leaderboardId}/standings": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "queries all the participants connected to leaderboard by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "The id of the leaderboard, which standings should be queried",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "The tags the leaderboard should filter for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StandingsByLeaderboardResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandingsByLeaderboardResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandingsByLeaderboardResult"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/runs": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets the runs related to a leaderboard",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RunsByLeaderboardResultPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunsByLeaderboardResultPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunsByLeaderboardResultPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/participant/{participantId}": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets a participant by its ID.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/benchmark/standing/{leaderboardId}/{participantId}": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Gets a standing by leaderboardId and participantId.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStandingByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/{leaderboardId}/participants/{participantId}/submit": {
      "post": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Submits a participant to a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/leaderboard/{leaderboardId}/boost": {
      "post": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Boosts a subset of participants within a leaderboard.",
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "description": "the leaderboard that should be boosted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoostLeaderboardModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BoostLeaderboardModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BoostLeaderboardModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              }
            }
          }
        }
      }
    },
    "/participant/{participantId}/sample": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "Adds a sample to a participant.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "The id of the participant to add the sample to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "$ref": "#/components/schemas/CreateSampleModel"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "texts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "If files aren't applicable texts can be used instead"
                  },
                  "urls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    },
                    "description": "Exposed assets can be added via urls."
                  }
                }
              },
              "encoding": {
                "files": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "texts": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                },
                "urls": {
                  "contentType": "text/plain",
                  "style": "form",
                  "explode": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/participant/{participantId}": {
      "delete": {
        "tags": [
          "Participant"
        ],
        "summary": "Deletes a participant on a benchmark.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Participant"
        ],
        "summary": "Gets a participant by it's Id.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/participants/{participantId}/submit": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "Submits a participant to a benchmark.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitParticipantResult"
                }
              }
            }
          }
        }
      }
    },
    "/participant/{participantId}/name": {
      "put": {
        "tags": [
          "Participant"
        ],
        "summary": "Updates the name of a participant",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantNameModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/participant-sample/{sampleId}": {
      "delete": {
        "tags": [
          "Participant"
        ],
        "summary": "Deletes a sample.",
        "parameters": [
          {
            "name": "sampleId",
            "in": "path",
            "description": "the id of the sample to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetParticipantByIdResult"
                }
              }
            }
          }
        }
      }
    },
    "/participant/{participantId}/samples": {
      "get": {
        "tags": [
          "Participant"
        ],
        "summary": "Queries all samples of a participant.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SampleByParticipantPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleByParticipantPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleByParticipantPagedResult"
                }
              }
            }
          }
        }
      }
    },
    "/participant/{participantId}/disable": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "This endpoint disables a participant in a benchmark. this means that the participant will no longer actively be matched up against other participants and not collect further results. It will still be visible in the leaderboard.",
        "parameters": [
          {
            "name": "participantId",
            "in": "path",
            "description": "The id of the participant to be disabled",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/benchmark-prompt/{promptId}/tags": {
      "put": {
        "tags": [
          "Prompt"
        ],
        "summary": "Updates the tags associated with a prompt.",
        "parameters": [
          {
            "name": "promptId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptTagsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptTagsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptTagsModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AssetMetadataModel": {
        "title": "AssetModel",
        "required": [
          "_t",
          "asset"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AssetModel"
            ],
            "type": "string",
            "description": "Discriminator value for AssetModel",
            "default": "AssetModel",
            "example": "AssetModel"
          },
          "asset": {
            "type": "object",
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "ClassificationMetadataModel": {
        "title": "ClassificationMetadata",
        "required": [
          "_t",
          "classification"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ClassificationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for ClassificationMetadata",
            "default": "ClassificationMetadata",
            "example": "ClassificationMetadata"
          },
          "classification": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CountMetadataModel": {
        "title": "CountMetadata",
        "required": [
          "_t",
          "count"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CountMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for CountMetadata",
            "default": "CountMetadata",
            "example": "CountMetadata"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateDatapointFromFilesModel": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The metadata of the datapoint."
          },
          "sortIndex": {
            "type": "integer",
            "description": "The index will be used to keep the datapoints in order. Useful if upload is parallelized",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The form request for creating a datapoint from files.\nNeeds to be encoded as a json string in the form request."
      },
      "CreateDatapointFromTextSourcesModel": {
        "required": [
          "textSources"
        ],
        "type": "object",
        "properties": {
          "textSources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The text sources to upload."
          },
          "sortIndex": {
            "type": "integer",
            "description": "The index will be used to keep the datapoints in order. Useful if upload is parallelized",
            "format": "int64",
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "Additional metadata to attach to the datapoint.\nMost commonly used to add a prompt to the datapoint using the Rapidata.Shared.Assets.Abstraction.Models.Metadata.Input.PromptMetadataInput.",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The body request for uploading text sources to a dataset."
      },
      "CreateDatapointFromUrlsModel": {
        "required": [
          "urls"
        ],
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "The urls to fetch the assets from.\nThe urls must be publicly accessible.\nA HEAD request will be made to each url to check if it is accessible."
          },
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "Additional metadata to attach to the datapoint.\nMost commonly used to add a prompt to the datapoint using the Rapidata.Shared.Assets.Abstraction.Models.Metadata.Input.PromptMetadataInput.",
            "default": null,
            "nullable": true
          },
          "sortIndex": {
            "type": "integer",
            "description": "The index will be used to keep the datapoints in order. Useful if upload is parallelized",
            "format": "int64",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The body request for creating a datapoint from urls."
      },
      "CreateDatapointResult": {
        "required": [
          "datapointId"
        ],
        "type": "object",
        "properties": {
          "datapointId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateDatapointsFromS3BucketModel": {
        "required": [
          "bucketName",
          "sourcePrefix"
        ],
        "type": "object",
        "properties": {
          "bucketName": {
            "type": "string",
            "description": "The name of the S3 bucket to upload the files from."
          },
          "region": {
            "type": "string",
            "description": "The region of the S3 bucket.",
            "nullable": true
          },
          "sourcePrefix": {
            "type": "string",
            "description": "The prefix of the files to upload."
          },
          "accessKey": {
            "type": "string",
            "description": "The access key to use for the S3 bucket.",
            "nullable": true
          },
          "secretKey": {
            "type": "string",
            "description": "The secret key to use for the S3 bucket.",
            "nullable": true
          },
          "useCustomAwsCredentials": {
            "type": "boolean",
            "description": "Whether to use custom AWS credentials.",
            "nullable": true
          },
          "clearDataset": {
            "type": "boolean",
            "description": "Whether to clear the dataset before uploading the files.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for creating datapoints from files in a S3 bucket."
      },
      "Datapoint": {
        "required": [
          "asset",
          "createdAt",
          "datasetId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "sortIndex": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DatapointModel": {
        "required": [
          "asset",
          "datasetId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "DatapointModelPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointModel"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DatapointState": {
        "enum": [
          "Ready",
          "Pending",
          "Failed"
        ],
        "type": "string"
      },
      "Demographic": {
        "required": [
          "confidence",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "confidence": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DemographicMetadataModel": {
        "title": "DemographicMetadata",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "DemographicMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for DemographicMetadata",
            "default": "DemographicMetadata",
            "example": "DemographicMetadata"
          },
          "demographics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Demographic"
            }
          }
        },
        "additionalProperties": false
      },
      "FileAssetInput": {
        "title": "FileAssetInput",
        "required": [
          "_t",
          "file"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for FileAssetInput",
            "default": "FileAssetInput",
            "example": "FileAssetInput"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ProxyFileWrapper"
              },
              {
                "$ref": "#/components/schemas/StreamFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ZipEntryFileWrapper"
              },
              {
                "$ref": "#/components/schemas/LocalFileWrapper"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FileAssetModel": {
        "title": "FileAsset",
        "required": [
          "_t",
          "fileName",
          "identifier",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAsset"
            ],
            "type": "string",
            "description": "Discriminator value for FileAsset",
            "default": "FileAsset",
            "example": "FileAsset"
          },
          "fileName": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FileType": {
        "enum": [
          "Unknown",
          "Image",
          "Video",
          "Audio"
        ],
        "type": "string"
      },
      "FileTypeMetadataModel": {
        "title": "FileTypeMetadata",
        "required": [
          "_t",
          "fileType"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileTypeMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for FileTypeMetadata",
            "default": "FileTypeMetadata",
            "example": "FileTypeMetadata"
          },
          "fileType": {
            "enum": [
              "Unknown",
              "Image",
              "Video",
              "Audio"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Filter": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "operator": {
            "enum": [
              "Eq",
              "Neq",
              "Gt",
              "Gte",
              "Lt",
              "Lte",
              "Contains",
              "StartsWith",
              "EndsWith",
              "In"
            ],
            "type": "string"
          },
          "logic": {
            "enum": [
              "And",
              "Or",
              "Not"
            ],
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        },
        "additionalProperties": false
      },
      "FilterOperator": {
        "enum": [
          "Eq",
          "Neq",
          "Gt",
          "Gte",
          "Lt",
          "Lte",
          "Contains",
          "StartsWith",
          "EndsWith",
          "In"
        ],
        "type": "string"
      },
      "FormFileWrapper": {
        "title": "FormFileWrapper",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FormFileWrapper"
            ],
            "type": "string",
            "description": "Discriminator value for FormFileWrapper",
            "default": "FormFileWrapper",
            "example": "FormFileWrapper"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "contentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isInMemory": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetDatapointByIdResult": {
        "required": [
          "asset",
          "createdAt",
          "datasetId",
          "id",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "state": {
            "enum": [
              "Ready",
              "Pending",
              "Failed"
            ],
            "type": "string"
          },
          "sortIndex": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetDatasetByIdResult": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetDatasetProgressResult": {
        "required": [
          "failed",
          "pending",
          "ready",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "ready": {
            "type": "integer",
            "format": "int32"
          },
          "pending": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetFailedDatapointsResult": {
        "required": [
          "datapoints"
        ],
        "type": "object",
        "properties": {
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Datapoint"
            }
          }
        },
        "additionalProperties": false
      },
      "ImageDimensionMetadataModel": {
        "title": "ImageDimensionMetadata",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ImageDimensionMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for ImageDimensionMetadata",
            "default": "ImageDimensionMetadata",
            "example": "ImageDimensionMetadata"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImportFromFileResult": {
        "required": [
          "datasetId"
        ],
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocalFileWrapper": {
        "title": "LocalFileWrapper",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocalFileWrapper"
            ],
            "type": "string",
            "description": "Discriminator value for LocalFileWrapper",
            "default": "LocalFileWrapper",
            "example": "LocalFileWrapper"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "contentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isInMemory": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LocationMetadataModel": {
        "title": "LocationMetadata",
        "required": [
          "_t",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for LocationMetadata",
            "default": "LocationMetadata",
            "example": "LocationMetadata"
          },
          "x": {
            "type": "number",
            "format": "float"
          },
          "y": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "LogicOperator": {
        "enum": [
          "And",
          "Or",
          "Not"
        ],
        "type": "string"
      },
      "MultiAssetInput": {
        "title": "MultiAssetInput",
        "required": [
          "_t",
          "assets"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAssetInput",
            "default": "MultiAssetInput",
            "example": "MultiAssetInput"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAssetInput"
                },
                {
                  "$ref": "#/components/schemas/MultiAssetInput"
                },
                {
                  "$ref": "#/components/schemas/TextAssetInput"
                },
                {
                  "$ref": "#/components/schemas/UrlAssetInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MultiAssetModel": {
        "title": "MultiAsset",
        "required": [
          "_t",
          "assets",
          "identifier",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAsset"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAsset",
            "default": "MultiAsset",
            "example": "MultiAsset"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAssetModel"
                },
                {
                  "$ref": "#/components/schemas/MultiAssetModel"
                },
                {
                  "$ref": "#/components/schemas/NullAssetModel"
                },
                {
                  "$ref": "#/components/schemas/TextAssetModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NullAssetModel": {
        "title": "NullAsset",
        "required": [
          "_t",
          "identifier",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NullAsset"
            ],
            "type": "string",
            "description": "Discriminator value for NullAsset",
            "default": "NullAsset",
            "example": "NullAsset"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OriginalFilenameMetadataModel": {
        "title": "OriginalFilenameMetadata",
        "required": [
          "_t",
          "originalFilename"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OriginalFilenameMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for OriginalFilenameMetadata",
            "default": "OriginalFilenameMetadata",
            "example": "OriginalFilenameMetadata"
          },
          "originalFilename": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PageInfo": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrivateTextMetadataInput": {
        "title": "PrivateTextMetadataInput",
        "required": [
          "_t",
          "identifier",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PrivateTextMetadataInput"
            ],
            "type": "string",
            "description": "Discriminator value for PrivateTextMetadataInput",
            "default": "PrivateTextMetadataInput",
            "example": "PrivateTextMetadataInput"
          },
          "text": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PromptAssetMetadataInput": {
        "title": "PromptAssetMetadataInput",
        "required": [
          "_t",
          "asset"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PromptAssetMetadataInput"
            ],
            "type": "string",
            "description": "Discriminator value for PromptAssetMetadataInput",
            "default": "PromptAssetMetadataInput",
            "example": "PromptAssetMetadataInput"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetInput2"
              },
              {
                "$ref": "#/components/schemas/MultiAssetInput2"
              },
              {
                "$ref": "#/components/schemas/TextAssetInput"
              },
              {
                "$ref": "#/components/schemas/UrlAssetInput"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PromptMetadataInput": {
        "title": "PromptMetadataInput",
        "required": [
          "_t",
          "prompt"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PromptMetadataInput"
            ],
            "type": "string",
            "description": "Discriminator value for PromptMetadataInput",
            "default": "PromptMetadataInput",
            "example": "PromptMetadataInput"
          },
          "prompt": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PromptMetadataModel": {
        "title": "PromptMetadata",
        "required": [
          "_t",
          "prompt"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PromptMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for PromptMetadata",
            "default": "PromptMetadata",
            "example": "PromptMetadata"
          },
          "prompt": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProxyFileWrapper": {
        "title": "ProxyFileWrapper",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ProxyFileWrapper"
            ],
            "type": "string",
            "description": "Discriminator value for ProxyFileWrapper",
            "default": "ProxyFileWrapper",
            "example": "ProxyFileWrapper"
          },
          "name": {
            "type": "string"
          },
          "contentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "isInMemory": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PublicTextMetadataInput": {
        "title": "PublicTextMetadataInput",
        "required": [
          "_t",
          "identifier",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PublicTextMetadataInput"
            ],
            "type": "string",
            "description": "Discriminator value for PublicTextMetadataInput",
            "default": "PublicTextMetadataInput",
            "example": "PublicTextMetadataInput"
          },
          "text": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "QueryModel": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "filter": {
            "$ref": "#/components/schemas/RootFilter"
          },
          "sortCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortCriterion"
            },
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RootFilter": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "logic": {
            "enum": [
              "And",
              "Or",
              "Not"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SortCriterion": {
        "required": [
          "direction",
          "propertyName"
        ],
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string"
          },
          "direction": {
            "enum": [
              "Asc",
              "Desc"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SortDirection": {
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      },
      "SourceUrlMetadataModel": {
        "title": "SourceUrlMetadataModel",
        "required": [
          "_t",
          "url"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SourceUrlMetadataModel"
            ],
            "type": "string",
            "description": "Discriminator value for SourceUrlMetadataModel",
            "default": "SourceUrlMetadataModel",
            "example": "SourceUrlMetadataModel"
          },
          "url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StreamFileWrapper": {
        "title": "StreamFileWrapper",
        "required": [
          "_t",
          "name",
          "stream"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "StreamFileWrapper"
            ],
            "type": "string",
            "description": "Discriminator value for StreamFileWrapper",
            "default": "StreamFileWrapper",
            "example": "StreamFileWrapper"
          },
          "stream": {
            "type": "string",
            "format": "binary"
          },
          "name": {
            "type": "string"
          },
          "contentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "isInMemory": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StreamsMetadataModel": {
        "title": "StreamsMetadata",
        "required": [
          "_t",
          "hasAudio",
          "hasSubtitles",
          "hasVideo"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "StreamsMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for StreamsMetadata",
            "default": "StreamsMetadata",
            "example": "StreamsMetadata"
          },
          "hasVideo": {
            "type": "boolean"
          },
          "hasAudio": {
            "type": "boolean"
          },
          "hasSubtitles": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TextAssetInput": {
        "title": "TextAssetInput",
        "required": [
          "_t",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TextAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for TextAssetInput",
            "default": "TextAssetInput",
            "example": "TextAssetInput"
          },
          "text": {
            "type": "string"
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TextAssetModel": {
        "title": "TextAsset",
        "required": [
          "_t",
          "identifier",
          "metadata",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TextAsset"
            ],
            "type": "string",
            "description": "Discriminator value for TextAsset",
            "default": "TextAsset",
            "example": "TextAsset"
          },
          "text": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextMetadataModel": {
        "title": "TextMetadata",
        "required": [
          "_t",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TextMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for TextMetadata",
            "default": "TextMetadata",
            "example": "TextMetadata"
          },
          "text": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranscriptionMetadataInput": {
        "title": "TranscriptionMetadataInput",
        "required": [
          "_t",
          "transcription"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionMetadataInput"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionMetadataInput",
            "default": "TranscriptionMetadataInput",
            "example": "TranscriptionMetadataInput"
          },
          "transcription": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranscriptionMetadataModel": {
        "title": "TranscriptionMetadataModel",
        "required": [
          "_t",
          "transcription"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionMetadataModel"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionMetadataModel",
            "default": "TranscriptionMetadataModel",
            "example": "TranscriptionMetadataModel"
          },
          "transcription": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranslatedPromptMetadataModel": {
        "title": "TranslatedPromptMetadata",
        "required": [
          "_t",
          "prompt"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranslatedPromptMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for TranslatedPromptMetadata",
            "default": "TranslatedPromptMetadata",
            "example": "TranslatedPromptMetadata"
          },
          "prompt": {
            "$ref": "#/components/schemas/TranslatedString"
          }
        },
        "additionalProperties": false
      },
      "TranslatedString": {
        "required": [
          "englishText",
          "targetLanguage",
          "text",
          "wasTranslated"
        ],
        "type": "object",
        "properties": {
          "wasTranslated": {
            "type": "boolean"
          },
          "englishText": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "targetLanguage": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateDatasetNameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the dataset."
          }
        },
        "additionalProperties": false,
        "description": "The body request for updating the name of a dataset."
      },
      "UploadFromS3Result": {
        "type": "object",
        "properties": {
          "estimatedCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UrlAssetInput": {
        "title": "UrlAssetInput",
        "required": [
          "_t",
          "url"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "UrlAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for UrlAssetInput",
            "default": "UrlAssetInput",
            "example": "UrlAssetInput"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "VideoDurationMetadataModel": {
        "title": "VideoDurationMetadata",
        "required": [
          "_t",
          "duration"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "VideoDurationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for VideoDurationMetadata",
            "default": "VideoDurationMetadata",
            "example": "VideoDurationMetadata"
          },
          "duration": {
            "type": "string",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "ZipEntryFileWrapper": {
        "title": "ZipEntryFileWrapper",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ZipEntryFileWrapper"
            ],
            "type": "string",
            "description": "Discriminator value for ZipEntryFileWrapper",
            "default": "ZipEntryFileWrapper",
            "example": "ZipEntryFileWrapper"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "contentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isInMemory": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AbTestSelection": {
        "title": "AbTestSelection",
        "required": [
          "_t",
          "a",
          "b"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AbTestSelection"
            ],
            "type": "string",
            "description": "Discriminator value for AbTestSelection",
            "default": "AbTestSelection",
            "example": "AbTestSelection"
          },
          "userSegment": {
            "type": "string",
            "nullable": true
          },
          "a": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "b": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "AgeGroup": {
        "enum": [
          "0-17",
          "18-29",
          "30-39",
          "40-49",
          "50-64",
          "65+"
        ],
        "type": "string"
      },
      "AgeUserFilterModel": {
        "title": "AgeFilter",
        "required": [
          "_t",
          "ageGroups"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AgeFilter"
            ],
            "type": "string",
            "description": "Discriminator value for AgeFilter",
            "default": "AgeFilter",
            "example": "AgeFilter"
          },
          "ageGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeGroup"
            }
          }
        },
        "additionalProperties": false
      },
      "AggregatorType": {
        "enum": [
          "NonCommittal",
          "MajorityVote",
          "SimpleMatchup",
          "LocateCluster",
          "Classification",
          "Locate",
          "BoundingBox",
          "Line",
          "Transcription",
          "SinglePointLocate",
          "FreeText",
          "Scrub"
        ],
        "type": "string"
      },
      "AndUserFilterModel": {
        "title": "AndFilter",
        "required": [
          "_t",
          "filters"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AndFilter"
            ],
            "type": "string",
            "description": "Discriminator value for AndFilter",
            "default": "AndFilter",
            "example": "AndFilter"
          },
          "filters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AgeUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/AndUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CampaignUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CountryUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CustomUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/GenderUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/LanguageUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NewUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NotUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/OrUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/ResponseCountUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/UserScoreUserFilterModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "AttachCategoryRapidBlueprint": {
        "title": "ClassifyBlueprint",
        "required": [
          "_t",
          "possibleCategories",
          "title"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ClassifyBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for ClassifyBlueprint",
            "default": "ClassifyBlueprint",
            "example": "ClassifyBlueprint"
          },
          "possibleCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BoundingBoxRapidBlueprint": {
        "title": "BoundingBoxBlueprint",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "BoundingBoxBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for BoundingBoxBlueprint",
            "default": "BoundingBoxBlueprint",
            "example": "BoundingBoxBlueprint"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CampaignUserFilterModel": {
        "title": "CampaignFilter",
        "required": [
          "_t",
          "campaignIds"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CampaignFilter"
            ],
            "type": "string",
            "description": "Discriminator value for CampaignFilter",
            "default": "CampaignFilter",
            "example": "CampaignFilter"
          },
          "campaignIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "CappedSelection": {
        "title": "CappedSelection",
        "required": [
          "_t",
          "maxRapids",
          "selections"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CappedSelection"
            ],
            "type": "string",
            "description": "Discriminator value for CappedSelection",
            "default": "CappedSelection",
            "example": "CappedSelection"
          },
          "selections": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "maxRapids": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClassificationMetadataFilterConfig": {
        "title": "ClassificationMetadataFilterConfig",
        "required": [
          "_t",
          "classification"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ClassificationMetadataFilterConfig"
            ],
            "type": "string",
            "description": "Discriminator value for ClassificationMetadataFilterConfig",
            "default": "ClassificationMetadataFilterConfig",
            "example": "ClassificationMetadataFilterConfig"
          },
          "classification": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CloneDatasetModel": {
        "title": "CloneDatasetModel",
        "required": [
          "_t",
          "datasetName",
          "datasetToCloneId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CloneDatasetModel"
            ],
            "type": "string",
            "description": "Discriminator value for CloneDatasetModel",
            "default": "CloneDatasetModel",
            "example": "CloneDatasetModel"
          },
          "datasetToCloneId": {
            "type": "string",
            "description": "The id of the dataset to clone"
          },
          "datasetName": {
            "type": "string",
            "description": "The name of the new dataset"
          }
        },
        "additionalProperties": false,
        "description": "Model for cloning a dataset"
      },
      "CloneOrderModel": {
        "required": [
          "orderName"
        ],
        "type": "object",
        "properties": {
          "orderName": {
            "type": "string",
            "description": "The name of the new order"
          }
        },
        "additionalProperties": false,
        "description": "The model for cloning an existing order."
      },
      "CloneOrderResult": {
        "required": [
          "datasetId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CompareRapidBlueprint": {
        "title": "CompareBlueprint",
        "required": [
          "_t",
          "criteria"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for CompareBlueprint",
            "default": "CompareBlueprint",
            "example": "CompareBlueprint"
          },
          "criteria": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CompareWorkflowModel": {
        "title": "CompareWorkflow",
        "required": [
          "_t",
          "criteria"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareWorkflow"
            ],
            "type": "string",
            "description": "Discriminator value for CompareWorkflow",
            "default": "CompareWorkflow",
            "example": "CompareWorkflow"
          },
          "criteria": {
            "type": "string",
            "description": "The criteria that the datapoints should be compared based on. No default value."
          },
          "pairMakerConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OnlinePairMakerConfigModel"
              }
            ],
            "description": "The PairMaker config determines the pair making algorithm for compare workflows",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "eloConfig": {
            "$ref": "#/components/schemas/EloConfigModel"
          },
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The metadata is attached to every single rapid and can be used for something like the prompt.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If the SimpleWorkflow is chosen, each datapoint uploaded will correspond to a single task to be solved.\nThis is the most commonly chosen workflow."
      },
      "ComparisonOperator": {
        "enum": [
          "Equal",
          "NotEqual",
          "LessThan",
          "LessThanOrEqual",
          "GreaterThan",
          "GreaterThanOrEqual"
        ],
        "type": "string"
      },
      "ConditionalValidationSelection": {
        "title": "ConditionalValidationSelection",
        "required": [
          "_t",
          "validationChances",
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ConditionalValidationSelection"
            ],
            "type": "string",
            "description": "Discriminator value for ConditionalValidationSelection",
            "default": "ConditionalValidationSelection",
            "example": "ConditionalValidationSelection"
          },
          "validationSetId": {
            "type": "string"
          },
          "validationChances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationChance"
            }
          },
          "dimension": {
            "type": "string",
            "nullable": true
          },
          "dimensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "CountClassificationMetadataFilterConfig": {
        "title": "CountClassificationMetadataFilterConfig",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CountClassificationMetadataFilterConfig"
            ],
            "type": "string",
            "description": "Discriminator value for CountClassificationMetadataFilterConfig",
            "default": "CountClassificationMetadataFilterConfig",
            "example": "CountClassificationMetadataFilterConfig"
          }
        },
        "additionalProperties": false
      },
      "CountryUserFilterModel": {
        "title": "CountryFilter",
        "required": [
          "_t",
          "countries"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CountryFilter"
            ],
            "type": "string",
            "description": "Discriminator value for CountryFilter",
            "default": "CountryFilter",
            "example": "CountryFilter"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateComplexOrderModel": {
        "required": [
          "orderName",
          "pipeline"
        ],
        "type": "object",
        "properties": {
          "orderName": {
            "type": "string",
            "description": "The name of the order"
          },
          "pipeline": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateSimplePipelineModel"
              }
            ],
            "description": "The pipeline to use",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "isDemo": {
            "type": "boolean",
            "description": "Whether the order is public",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "The model for creating a new order with a custom pipeline."
      },
      "CreateComplexOrderResult": {
        "required": [
          "orderId",
          "pipelineId"
        ],
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string"
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "pipelineId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateDatasetArtifactModel": {
        "title": "CreateDatasetArtifactModel",
        "required": [
          "_t",
          "dataset",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CreateDatasetArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for CreateDatasetArtifactModel",
            "default": "CreateDatasetArtifactModel",
            "example": "CreateDatasetArtifactModel"
          },
          "identifier": {
            "type": "string",
            "description": "The identifier of the artifact"
          },
          "dataset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CloneDatasetModel"
              }
            ],
            "description": "The model of the dataset",
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a dataset artifact"
      },
      "CreateOrderModel": {
        "title": "CreateOrderModel",
        "required": [
          "_t",
          "orderName",
          "referee",
          "workflow"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CreateOrderModel"
            ],
            "type": "string",
            "description": "Discriminator value for CreateOrderModel",
            "default": "CreateOrderModel",
            "example": "CreateOrderModel"
          },
          "orderName": {
            "type": "string",
            "description": "The name is used as an identifier for an order and can be freely chosen."
          },
          "workflow": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EvaluationWorkflowModel"
              },
              {
                "$ref": "#/components/schemas/SimpleWorkflowModel"
              },
              {
                "$ref": "#/components/schemas/CompareWorkflowModel"
              }
            ],
            "description": "The workflow helps to determine the tasks that need to be completed by the users.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeModel"
              },
              {
                "$ref": "#/components/schemas/EarlyStoppingRefereeModel"
              }
            ],
            "description": "The referee is used to determine how many votes will be collected.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "aggregator": {
            "enum": [
              "NonCommittal",
              "MajorityVote",
              "SimpleMatchup",
              "LocateCluster",
              "Classification",
              "Locate",
              "BoundingBox",
              "Line",
              "Transcription",
              "SinglePointLocate",
              "FreeText",
              "Scrub"
            ],
            "type": "string",
            "description": "The aggregator is used to determine how the data will be aggregated. The default behavior is enough for most cases",
            "nullable": true
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureFlagModel"
            },
            "description": "The feature flags are used to enable or disable certain features.",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority is used to prioritize over other orders.",
            "format": "int32",
            "nullable": true
          },
          "stickyState": {
            "enum": [
              "None",
              "Temporary",
              "Permanent"
            ],
            "type": "string",
            "description": "Indicates if the underlying campaign should be sticky.",
            "nullable": true
          },
          "userScoreDimensions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The user score dimensions are used to determine the score of the responses from the user.",
            "nullable": true
          },
          "demographicKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The demographic keys are used to determine which demographics to store on the resposnes from the user.",
            "nullable": true
          },
          "userFilters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AgeUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/AndUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CampaignUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CountryUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CustomUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/GenderUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/LanguageUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NewUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NotUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/OrUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/ResponseCountUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/UserScoreUserFilterModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The user filters are used to restrict the order to only collect votes from a specific demographic.",
            "nullable": true
          },
          "validationSetId": {
            "type": "string",
            "description": "The validation set id can be changed to point to a specific validation set. if not provided a sane default will be\nused.",
            "nullable": true
          },
          "selections": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The selections are used to determine which tasks are shown to a user.",
            "nullable": true
          },
          "retrievalMode": {
            "enum": [
              "Random",
              "Shuffled",
              "Sequential"
            ],
            "type": "string",
            "description": "The retrieval mode defines how rapids are retrieved from the active labeling pool.",
            "nullable": true
          },
          "maxIterations": {
            "type": "integer",
            "description": "The maximum number of times a user is allowed to see the same rapid.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This model is used to create a simple order"
      },
      "CreateOrderResult": {
        "required": [
          "orderId",
          "pipelineId"
        ],
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string"
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "pipelineId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateSimplePipelineModel": {
        "title": "CreateSimplePipelineModel",
        "required": [
          "_t",
          "artifacts",
          "namePrefix",
          "pipelineSteps"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CreateSimplePipelineModel"
            ],
            "type": "string",
            "description": "Discriminator value for CreateSimplePipelineModel",
            "default": "CreateSimplePipelineModel",
            "example": "CreateSimplePipelineModel"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDatasetArtifactModel"
                }
              ],
              "description": "Base interface for artifact models",
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The list of static artifacts"
          },
          "pipelineSteps": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DatasetEvaluationStepModel"
                },
                {
                  "$ref": "#/components/schemas/SendCompletionMailStepModel"
                },
                {
                  "$ref": "#/components/schemas/WorkflowAggregationStepModel"
                },
                {
                  "$ref": "#/components/schemas/WorkflowLabelingStepModel"
                },
                {
                  "$ref": "#/components/schemas/WorkflowSplitModel"
                }
              ],
              "description": "Base model for a pipeline step",
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The list of pipeline steps"
          },
          "namePrefix": {
            "type": "string",
            "description": "The prefix for the pipeline name"
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a simple pipeline"
      },
      "CreateUnsupportedOrderModel": {
        "required": [
          "dataType",
          "labelType",
          "orderName"
        ],
        "type": "object",
        "properties": {
          "orderName": {
            "type": "string",
            "description": "The name of the order"
          },
          "dataType": {
            "type": "string",
            "description": "The type of the data that was attempted to be ordered"
          },
          "labelType": {
            "type": "string",
            "description": "The type of the labels that were attempted to be ordered"
          }
        },
        "additionalProperties": false,
        "description": "The model for creating an order with an unsupported label type or data type."
      },
      "CustomUserFilterModel": {
        "title": "CustomFilter",
        "required": [
          "_t",
          "identifier",
          "values"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CustomFilter"
            ],
            "type": "string",
            "description": "Discriminator value for CustomFilter",
            "default": "CustomFilter",
            "example": "CustomFilter"
          },
          "identifier": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "DatasetEvaluationStepModel": {
        "title": "DatasetEvaluationStepModel",
        "required": [
          "_t",
          "aggregationResultFileArtifactId",
          "datasetArtifactId",
          "evaluationResultFileArtifactId",
          "receiver"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "DatasetEvaluationStepModel"
            ],
            "type": "string",
            "description": "Discriminator value for DatasetEvaluationStepModel",
            "default": "DatasetEvaluationStepModel",
            "example": "DatasetEvaluationStepModel"
          },
          "datasetArtifactId": {
            "type": "string",
            "description": "The dataset artifact id"
          },
          "aggregationResultFileArtifactId": {
            "type": "string",
            "description": "The identifier of the resulting aggregation file"
          },
          "evaluationResultFileArtifactId": {
            "type": "string",
            "description": "The identifier of the resulting evaluation file"
          },
          "receiver": {
            "type": "string",
            "description": "The email address of the receiver to be notified once the step is completed"
          }
        },
        "additionalProperties": false,
        "description": "Model for the dataset evaluation step"
      },
      "DemographicSelection": {
        "title": "DemographicSelection",
        "required": [
          "_t",
          "keys"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "DemographicSelection"
            ],
            "type": "string",
            "description": "Discriminator value for DemographicSelection",
            "default": "DemographicSelection",
            "example": "DemographicSelection"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxRapids": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EarlyStoppingRefereeModel": {
        "title": "EarlyStoppingReferee",
        "required": [
          "_t",
          "maxVotes",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EarlyStoppingReferee"
            ],
            "type": "string",
            "description": "Discriminator value for EarlyStoppingReferee",
            "default": "EarlyStoppingReferee",
            "example": "EarlyStoppingReferee"
          },
          "maxVotes": {
            "type": "integer",
            "description": "The upper limit of votes that will be collected for each task.",
            "format": "int32"
          },
          "threshold": {
            "type": "number",
            "description": "The threshold that needs to be reached to stop collecting votes.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The Early Stopping Referee can currently only be used for classification tasks and will stop once a certain\nthreshold is reached or the maximum number of votes is collected."
      },
      "EffortCappedSelection": {
        "title": "EffortCappedSelection",
        "required": [
          "_t",
          "effortBudget"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EffortCappedSelection"
            ],
            "type": "string",
            "description": "Discriminator value for EffortCappedSelection",
            "default": "EffortCappedSelection",
            "example": "EffortCappedSelection"
          },
          "effortBudget": {
            "type": "integer",
            "format": "int32"
          },
          "retrievalMode": {
            "enum": [
              "Random",
              "Shuffled",
              "Sequential"
            ],
            "type": "string"
          },
          "maxIterations": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EloConfigModel": {
        "type": "object",
        "properties": {
          "startingElo": {
            "type": "integer",
            "description": "The starting ELO score for each datapoint.",
            "format": "int32"
          },
          "kFactor": {
            "type": "integer",
            "description": "The K-factor to use in the ELO calculation.\nDetermines the maximum possible change in a player's Elo rating after a single match.\nHigher K-Factor values result in larger rating changes.",
            "format": "int32"
          },
          "scalingFactor": {
            "type": "integer",
            "description": "Scaling factor to use in the ELO calculation.\nAdjusts the sensitivity of the Elo rating system to differences in player ratings.\nIt affects how much the rating changes based on the expected outcome versus the actual outcome.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "These parameters affect how the ELO algorithms behaves"
      },
      "EvaluationWorkflowModel": {
        "title": "EvaluationWorkflow",
        "required": [
          "_t",
          "shouldAcceptIncorrect",
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EvaluationWorkflow"
            ],
            "type": "string",
            "description": "Discriminator value for EvaluationWorkflow",
            "default": "EvaluationWorkflow",
            "example": "EvaluationWorkflow"
          },
          "validationSetId": {
            "type": "string",
            "description": "The Validation Set id is used to as a source for the tasks that will be sent to the user."
          },
          "shouldAcceptIncorrect": {
            "type": "boolean",
            "description": "Indicates if the user should get feedback on their answers if they answer wrong. If set to true the user will not\nnotice that he was tested."
          }
        },
        "additionalProperties": false,
        "description": "If the EvaluationWorkflow is chosen a validation set will be used as a source for all tasks.\nIt functions similarly to the SimpleWorkflow as there is a 1:1 mapping between validation rapids and tasks."
      },
      "FeatureFlagModel": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key is used to identify the feature flag."
          },
          "value": {
            "type": "string",
            "description": "The value is used to determine if the feature flag is enabled or disabled or can be a configuration option."
          }
        },
        "additionalProperties": false,
        "description": "A feature flag is used to enable or disable certain features."
      },
      "FeedbackModel": {
        "required": [
          "feedback"
        ],
        "type": "object",
        "properties": {
          "feedback": {
            "type": "string",
            "description": "The feedback"
          },
          "email": {
            "type": "string",
            "description": "The email of the user submitting the feedback",
            "default": null,
            "nullable": true
          },
          "token": {
            "type": "string",
            "description": "The recaptcha token of the user submitting the feedback",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for submitting feedback."
      },
      "FileAssetInput1": {
        "title": "FileAssetInput",
        "required": [
          "_t",
          "file"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for FileAssetInput",
            "default": "FileAssetInput",
            "example": "FileAssetInput"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ProxyFileWrapper"
              },
              {
                "$ref": "#/components/schemas/StreamFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ZipEntryFileWrapper"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FreeTextRapidBlueprint": {
        "title": "FreeTextBlueprint",
        "required": [
          "_t",
          "question"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FreeTextBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for FreeTextBlueprint",
            "default": "FreeTextBlueprint",
            "example": "FreeTextBlueprint"
          },
          "question": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Gender": {
        "enum": [
          "Male",
          "Female",
          "Other"
        ],
        "type": "string"
      },
      "GenderUserFilterModel": {
        "title": "GenderFilter",
        "required": [
          "_t",
          "genders"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "GenderFilter"
            ],
            "type": "string",
            "description": "Discriminator value for GenderFilter",
            "default": "GenderFilter",
            "example": "GenderFilter"
          },
          "genders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gender"
            }
          }
        },
        "additionalProperties": false
      },
      "GetOrderByIdResult": {
        "required": [
          "customerMail",
          "isLocked",
          "isPublic",
          "orderDate",
          "orderName",
          "pipelineId",
          "state"
        ],
        "type": "object",
        "properties": {
          "orderName": {
            "type": "string"
          },
          "customerMail": {
            "type": "string"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "pipelineId": {
            "type": "string"
          },
          "isLocked": {
            "type": "boolean"
          },
          "isPublic": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetPublicOrdersResult": {
        "required": [
          "orders"
        ],
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicOrderModel"
            }
          }
        },
        "additionalProperties": false
      },
      "LabelingSelection": {
        "title": "LabelingSelection",
        "required": [
          "_t",
          "amount"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LabelingSelection"
            ],
            "type": "string",
            "description": "Discriminator value for LabelingSelection",
            "default": "LabelingSelection",
            "example": "LabelingSelection"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "retrievalMode": {
            "enum": [
              "Random",
              "Shuffled",
              "Sequential"
            ],
            "type": "string"
          },
          "maxIterations": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LanguageUserFilterModel": {
        "title": "LanguageFilter",
        "required": [
          "_t",
          "languages"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LanguageFilter"
            ],
            "type": "string",
            "description": "Discriminator value for LanguageFilter",
            "default": "LanguageFilter",
            "example": "LanguageFilter"
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "LineRapidBlueprint": {
        "title": "LineBlueprint",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LineBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for LineBlueprint",
            "default": "LineBlueprint",
            "example": "LineBlueprint"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocateRapidBlueprint": {
        "title": "LocateBlueprint",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocateBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for LocateBlueprint",
            "default": "LocateBlueprint",
            "example": "LocateBlueprint"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocationMetadataExistsFilterConfig": {
        "title": "LocationMetadataExistsFilterConfig",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocationMetadataExistsFilterConfig"
            ],
            "type": "string",
            "description": "Discriminator value for LocationMetadataExistsFilterConfig",
            "default": "LocationMetadataExistsFilterConfig",
            "example": "LocationMetadataExistsFilterConfig"
          }
        },
        "additionalProperties": false
      },
      "MultiAssetInput1": {
        "title": "MultiAssetInput",
        "required": [
          "_t",
          "assets"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAssetInput",
            "default": "MultiAssetInput",
            "example": "MultiAssetInput"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAssetInput1"
                },
                {
                  "$ref": "#/components/schemas/MultiAssetInput1"
                },
                {
                  "$ref": "#/components/schemas/TextAssetInput"
                },
                {
                  "$ref": "#/components/schemas/UrlAssetInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NaiveRefereeModel": {
        "title": "NaiveReferee",
        "required": [
          "_t",
          "totalVotes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NaiveReferee"
            ],
            "type": "string",
            "description": "Discriminator value for NaiveReferee",
            "default": "NaiveReferee",
            "example": "NaiveReferee"
          },
          "totalVotes": {
            "type": "integer",
            "description": "The number of votes that need to be collected as a minimum.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The NaiveReferee is used to collect a fixed number of votes."
      },
      "NamedEntityRapidBlueprint": {
        "title": "NamedEntityBlueprint",
        "required": [
          "_t",
          "classes",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NamedEntityBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for NamedEntityBlueprint",
            "default": "NamedEntityBlueprint",
            "example": "NamedEntityBlueprint"
          },
          "target": {
            "type": "string"
          },
          "classes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "NewUserFilterModel": {
        "title": "NewUserFilter",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NewUserFilter"
            ],
            "type": "string",
            "description": "Discriminator value for NewUserFilter",
            "default": "NewUserFilter",
            "example": "NewUserFilter"
          }
        },
        "additionalProperties": false
      },
      "NotUserFilterModel": {
        "title": "NotFilter",
        "required": [
          "_t",
          "filter"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NotFilter"
            ],
            "type": "string",
            "description": "Discriminator value for NotFilter",
            "default": "NotFilter",
            "example": "NotFilter"
          },
          "filter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AgeUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/AndUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/CampaignUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/CountryUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/CustomUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/GenderUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/LanguageUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/NewUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/NotUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/OrUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/ResponseCountUserFilterModel"
              },
              {
                "$ref": "#/components/schemas/UserScoreUserFilterModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "OnlinePairMakerConfigModel": {
        "title": "OnlinePairMaker",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OnlinePairMaker"
            ],
            "type": "string",
            "description": "Discriminator value for OnlinePairMaker",
            "default": "OnlinePairMaker",
            "example": "OnlinePairMaker"
          },
          "randomMatchesRatio": {
            "type": "number",
            "description": "The ratio of random matches for the algorithm to burn-in.",
            "format": "float"
          },
          "totalComparisonBudget": {
            "type": "integer",
            "description": "Total number of comparisons to carry out.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The OnlinePairMaker creates random pairs in the beginning and then continues to create pairs\nthat are close in ranking."
      },
      "OrUserFilterModel": {
        "title": "OrFilter",
        "required": [
          "_t",
          "filters"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OrFilter"
            ],
            "type": "string",
            "description": "Discriminator value for OrFilter",
            "default": "OrFilter",
            "example": "OrFilter"
          },
          "filters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AgeUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/AndUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CampaignUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CountryUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CustomUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/GenderUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/LanguageUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NewUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NotUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/OrUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/ResponseCountUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/UserScoreUserFilterModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "OrderModel": {
        "required": [
          "customerMail",
          "id",
          "isPublic",
          "orderName",
          "pipelineId",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pipelineId": {
            "type": "string"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "customerMail": {
            "type": "string"
          },
          "state": {
            "enum": [
              "Created",
              "Preview",
              "Submitted",
              "ManualReview",
              "Processing",
              "Paused",
              "Completed",
              "Cancelled",
              "Failed"
            ],
            "type": "string"
          },
          "orderName": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrderModelPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderModel"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderState": {
        "enum": [
          "Created",
          "Preview",
          "Submitted",
          "ManualReview",
          "Processing",
          "Paused",
          "Completed",
          "Cancelled",
          "Failed"
        ],
        "type": "string"
      },
      "PolygonRapidBlueprint": {
        "title": "PolygonBlueprint",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PolygonBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for PolygonBlueprint",
            "default": "PolygonBlueprint",
            "example": "PolygonBlueprint"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PreviewOrderModel": {
        "type": "object",
        "properties": {
          "ignoreFailedDatapoints": {
            "type": "boolean",
            "description": "whether the order should proceed to be submitted even if certain datapoints failed.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "The model for previewing an order."
      },
      "PublicOrderModel": {
        "required": [
          "id",
          "isPublic",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ResponseCountUserFilterModel": {
        "title": "ResponseCountFilter",
        "required": [
          "_t",
          "dimension",
          "operator",
          "responseCount"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ResponseCountFilter"
            ],
            "type": "string",
            "description": "Discriminator value for ResponseCountFilter",
            "default": "ResponseCountFilter",
            "example": "ResponseCountFilter"
          },
          "responseCount": {
            "type": "integer",
            "format": "int32"
          },
          "dimension": {
            "type": "string"
          },
          "operator": {
            "enum": [
              "Equal",
              "NotEqual",
              "LessThan",
              "LessThanOrEqual",
              "GreaterThan",
              "GreaterThanOrEqual"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RetrievalMode": {
        "enum": [
          "Random",
          "Shuffled",
          "Sequential"
        ],
        "type": "string"
      },
      "ScrubRapidBlueprint": {
        "title": "ScrubBlueprint",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ScrubBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for ScrubBlueprint",
            "default": "ScrubBlueprint",
            "example": "ScrubBlueprint"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SendCompletionMailStepModel": {
        "title": "SendCompletionMailStepModel",
        "required": [
          "_t",
          "receiver",
          "resultsFileArtifactIdentifier"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SendCompletionMailStepModel"
            ],
            "type": "string",
            "description": "Discriminator value for SendCompletionMailStepModel",
            "default": "SendCompletionMailStepModel",
            "example": "SendCompletionMailStepModel"
          },
          "receiver": {
            "type": "string",
            "description": "The email address of the receiver"
          },
          "resultsFileArtifactIdentifier": {
            "type": "string",
            "description": "The identifier of the results file"
          }
        },
        "additionalProperties": false,
        "description": "Model for the send completion mail step"
      },
      "ShufflingSelection": {
        "title": "ShufflingSelection",
        "required": [
          "_t",
          "selections"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ShufflingSelection"
            ],
            "type": "string",
            "description": "Discriminator value for ShufflingSelection",
            "default": "ShufflingSelection",
            "example": "ShufflingSelection"
          },
          "selections": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "SimpleWorkflowModel": {
        "title": "SimpleWorkflow",
        "required": [
          "_t",
          "blueprint"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SimpleWorkflow"
            ],
            "type": "string",
            "description": "Discriminator value for SimpleWorkflow",
            "default": "SimpleWorkflow",
            "example": "SimpleWorkflow"
          },
          "blueprint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/ScrubRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/PolygonRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/NamedEntityRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LocateRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LineRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/FreeTextRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/CompareRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxRapidBlueprint"
              }
            ],
            "description": "The blueprint is used to create the tasks that will be shown to the users. They contain the common information\nacross all tasks. For example, the tasks question.",
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false,
        "description": "If the SimpleWorkflow is chosen, each datapoint uploaded will correspond to a single task to be solved.\nThis is the most commonly chosen workflow."
      },
      "StaticSelection": {
        "title": "StaticSelection",
        "required": [
          "_t",
          "rapidIds"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "StaticSelection"
            ],
            "type": "string",
            "description": "Discriminator value for StaticSelection",
            "default": "StaticSelection",
            "example": "StaticSelection"
          },
          "rapidIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "StickyState": {
        "enum": [
          "None",
          "Temporary",
          "Permanent"
        ],
        "type": "string"
      },
      "SubmitOrderModel": {
        "type": "object",
        "properties": {
          "ignoreFailedDatapoints": {
            "type": "boolean",
            "description": "whether the order should proceed to be submitted even if certain datapoints failed.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "The model for submitting an order."
      },
      "TranscriptionRapidBlueprint": {
        "title": "TranscriptionBlueprint",
        "required": [
          "_t",
          "title"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionBlueprint"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionBlueprint",
            "default": "TranscriptionBlueprint",
            "example": "TranscriptionBlueprint"
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UnlockOrderResult": {
        "required": [
          "datasetIds"
        ],
        "type": "object",
        "properties": {
          "datasetIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateOrderNameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the order"
          }
        },
        "additionalProperties": false,
        "description": "The model for updating the name of an order."
      },
      "UserScoreUserFilterModel": {
        "title": "UserScoreFilter",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "UserScoreFilter"
            ],
            "type": "string",
            "description": "Discriminator value for UserScoreFilter",
            "default": "UserScoreFilter",
            "example": "UserScoreFilter"
          },
          "lowerbound": {
            "type": "number",
            "format": "double"
          },
          "upperbound": {
            "type": "number",
            "format": "double"
          },
          "dimension": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidationChance": {
        "required": [
          "chance",
          "rapidCount",
          "userScoreThreshold"
        ],
        "type": "object",
        "properties": {
          "userScoreThreshold": {
            "type": "number",
            "format": "double"
          },
          "chance": {
            "type": "number",
            "format": "double"
          },
          "rapidCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ValidationSelection": {
        "title": "ValidationSelection",
        "required": [
          "_t",
          "amount",
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ValidationSelection"
            ],
            "type": "string",
            "description": "Discriminator value for ValidationSelection",
            "default": "ValidationSelection",
            "example": "ValidationSelection"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "validationSetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WorkflowAggregationStepModel": {
        "title": "WorkflowAggregationStepModel",
        "required": [
          "_t",
          "campaignArtifactId",
          "fileArtifactId",
          "workflowArtifactId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "WorkflowAggregationStepModel"
            ],
            "type": "string",
            "description": "Discriminator value for WorkflowAggregationStepModel",
            "default": "WorkflowAggregationStepModel",
            "example": "WorkflowAggregationStepModel"
          },
          "campaignArtifactId": {
            "type": "string",
            "description": "The campaign artifact id"
          },
          "workflowArtifactId": {
            "type": "string",
            "description": "The workflow artifact id"
          },
          "fileArtifactId": {
            "type": "string",
            "description": "The file artifact id"
          },
          "aggregatorType": {
            "enum": [
              "NonCommittal",
              "MajorityVote",
              "SimpleMatchup",
              "LocateCluster",
              "Classification",
              "Locate",
              "BoundingBox",
              "Line",
              "Transcription",
              "SinglePointLocate",
              "FreeText",
              "Scrub"
            ],
            "type": "string",
            "description": "The type of the aggregator",
            "default": "NonCommittal"
          }
        },
        "additionalProperties": false,
        "description": "Model for the workflow aggregation step"
      },
      "WorkflowLabelingStepModel": {
        "title": "WorkflowLabelingStepModel",
        "required": [
          "_t",
          "workflowArtifactId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "WorkflowLabelingStepModel"
            ],
            "type": "string",
            "description": "Discriminator value for WorkflowLabelingStepModel",
            "default": "WorkflowLabelingStepModel",
            "example": "WorkflowLabelingStepModel"
          },
          "workflowArtifactId": {
            "type": "string",
            "description": "The id of the workflow artifact to be labeled"
          }
        },
        "additionalProperties": false,
        "description": "Model for the labeling step"
      },
      "WorkflowSplitModel": {
        "title": "WorkflowSplitModel",
        "required": [
          "_t",
          "aggregationResultArtifactId",
          "destinationDatasetArtifactId",
          "filterConfigs",
          "sourceDatasetArtifactId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "WorkflowSplitModel"
            ],
            "type": "string",
            "description": "Discriminator value for WorkflowSplitModel",
            "default": "WorkflowSplitModel",
            "example": "WorkflowSplitModel"
          },
          "sourceDatasetArtifactId": {
            "type": "string",
            "description": "The source dataset artifact id"
          },
          "destinationDatasetArtifactId": {
            "type": "string",
            "description": "The destination dataset artifact id"
          },
          "aggregationResultArtifactId": {
            "type": "string",
            "description": "The aggregation result artifact id"
          },
          "filterConfigs": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ClassificationMetadataFilterConfig"
                },
                {
                  "$ref": "#/components/schemas/CountClassificationMetadataFilterConfig"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataExistsFilterConfig"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The filter configurations"
          }
        },
        "additionalProperties": false,
        "description": "Model for the workflow split step"
      },
      "ClientModel": {
        "required": [
          "client_id",
          "client_id_issued_at",
          "client_name",
          "client_secret",
          "client_secret_expires_at",
          "client_uri",
          "grant_types",
          "jwks",
          "jwks_uri",
          "logo_uri",
          "policy_uri",
          "redirect_uris",
          "response_types",
          "tos_uri"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The unique identifier for the client."
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret for the client, which is used to authenticate the client",
            "nullable": true
          },
          "client_id_issued_at": {
            "type": "integer",
            "description": "The date and time when the client identifier was issued.",
            "format": "int64",
            "nullable": true
          },
          "client_secret_expires_at": {
            "type": "integer",
            "description": "If the client has a secret, this is the date and time when the client secret expires.\nIf the client secret does not expire, this will be 0.",
            "format": "int64",
            "nullable": true
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of redirection URI strings for use in redirect-based flows\nsuch as the authorization code and implicit flows.",
            "nullable": true
          },
          "grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.",
            "nullable": true
          },
          "response_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.",
            "nullable": true
          },
          "client_name": {
            "type": "string",
            "description": "Human-readable string name of the client to be presented to the end-user during authorization.",
            "nullable": true
          },
          "client_uri": {
            "type": "string",
            "description": "URL string of a web page providing information about the client.",
            "nullable": true
          },
          "logo_uri": {
            "type": "string",
            "description": "URL string that references a logo for the client.",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "String containing a space-separated list of scope values\nthat the client can use when requesting access tokens.",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of strings representing ways to contact people responsible for this client,\ntypically email addresses.",
            "nullable": true
          },
          "tos_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable terms of service document for the client that describes\na contractual relationship between the end-user and the client that the end-user\naccepts when authorizing the client.",
            "nullable": true
          },
          "policy_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable privacy policy document\nthat describes how the deployment organization collects,\nuses, retains, and discloses personal data.",
            "nullable": true
          },
          "jwks_uri": {
            "type": "string",
            "description": "URL string referencing the client's JSON Web Key document, which contains the client's public keys.",
            "nullable": true
          },
          "jwks": {
            "$ref": "#/components/schemas/JsonWebKeySet"
          }
        },
        "additionalProperties": false,
        "description": "The response containing the id and secret of a dynamically registered client.\nAdditionally, it contains all registered metadata for the client."
      },
      "ClientsQueryResult": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientsQueryResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientsQueryResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CreateBridgeTokenResult": {
        "required": [
          "readKey",
          "writeKey"
        ],
        "type": "object",
        "properties": {
          "readKey": {
            "type": "string"
          },
          "writeKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateClientModel": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "An optional display name for the client.",
            "default": null,
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "An optional customer ID to create the client for.",
            "format": "uuid",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for creating a new client."
      },
      "CreateCustomerClientResult": {
        "required": [
          "clientId",
          "clientSecret"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DynamicClientRegistrationRequest": {
        "type": "object",
        "properties": {
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of redirection URI strings for use in redirect-based flows\nsuch as the authorization code and implicit flows.",
            "nullable": true
          },
          "grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.",
            "nullable": true
          },
          "response_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Unique identifier for the client.",
            "nullable": true
          },
          "client_name": {
            "type": "string",
            "description": "Human-readable string name of the client to be presented to the end-user during authorization.",
            "nullable": true
          },
          "client_uri": {
            "type": "string",
            "description": "URL string of a web page providing information about the client.",
            "nullable": true
          },
          "logo_uri": {
            "type": "string",
            "description": "URL string that references a logo for the client.",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "String containing a space-separated list of scope values\nthat the client can use when requesting access tokens.",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of strings representing ways to contact people responsible for this client,\ntypically email addresses.",
            "nullable": true
          },
          "tos_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable terms of service document for the client that describes\na contractual relationship between the end-user and the client that the end-user\naccepts when authorizing the client.",
            "nullable": true
          },
          "policy_uri": {
            "type": "string",
            "description": "URL string that points to a human-readable privacy policy document\nthat describes how the deployment organization collects,\nuses, retains, and discloses personal data.",
            "nullable": true
          },
          "jwks_uri": {
            "type": "string",
            "description": "URL string referencing the client's JSON Web Key document, which contains the client's public keys.",
            "nullable": true
          },
          "jwks": {
            "$ref": "#/components/schemas/JsonWebKeySet"
          }
        },
        "additionalProperties": false,
        "description": "The request body for dynamic client registration."
      },
      "GoogleOneTapLoginModel": {
        "required": [
          "idToken"
        ],
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string",
            "description": "The id token received from the Google One Tap login."
          }
        },
        "additionalProperties": false,
        "description": "The model for the Google One Tap login."
      },
      "JsonWebKey": {
        "type": "object",
        "properties": {
          "alg": {
            "type": "string",
            "nullable": true
          },
          "crv": {
            "type": "string",
            "nullable": true
          },
          "d": {
            "type": "string",
            "nullable": true
          },
          "dp": {
            "type": "string",
            "nullable": true
          },
          "dq": {
            "type": "string",
            "nullable": true
          },
          "e": {
            "type": "string",
            "nullable": true
          },
          "k": {
            "type": "string",
            "nullable": true
          },
          "key_ops": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "kid": {
            "type": "string",
            "nullable": true
          },
          "kty": {
            "type": "string",
            "nullable": true
          },
          "n": {
            "type": "string",
            "nullable": true
          },
          "oth": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "p": {
            "type": "string",
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "qi": {
            "type": "string",
            "nullable": true
          },
          "use": {
            "type": "string",
            "nullable": true
          },
          "x": {
            "type": "string",
            "nullable": true
          },
          "x5c": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "x5t": {
            "type": "string",
            "nullable": true
          },
          "x5t#S256": {
            "type": "string",
            "nullable": true
          },
          "x5u": {
            "type": "string",
            "nullable": true
          },
          "y": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "JsonWebKeySet": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonWebKey"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "NewsletterModel": {
        "required": [
          "email",
          "token"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user to subscribe or unsubscribe."
          },
          "token": {
            "type": "string",
            "description": "The recaptcha token to verify the user is not a bot."
          }
        },
        "additionalProperties": false,
        "description": "Model for subscribing and unsubscribing to the newsletter."
      },
      "NotAvailableYetResult": {
        "title": "NotAvailableYetResult",
        "required": [
          "_t",
          "message"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NotAvailableYetResult"
            ],
            "type": "string",
            "description": "Discriminator value for NotAvailableYetResult",
            "default": "NotAvailableYetResult",
            "example": "NotAvailableYetResult"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReadBridgeTokenKeysResult": {
        "title": "ReadBridgeTokenKeysResult",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ReadBridgeTokenKeysResult"
            ],
            "type": "string",
            "description": "Discriminator value for ReadBridgeTokenKeysResult",
            "default": "ReadBridgeTokenKeysResult",
            "example": "ReadBridgeTokenKeysResult"
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expiresIn": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "idToken": {
            "type": "string",
            "nullable": true
          },
          "tokenType": {
            "type": "string",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterTemporaryCustomerModel": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "A recaptcha token to verify the user is not a bot."
          }
        },
        "additionalProperties": false,
        "description": "The model for signing up a new temporary user."
      },
      "RegisterTemporaryCustomerResult": {
        "required": [
          "access_token",
          "id_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token to authenticate the user."
          },
          "expires_in": {
            "type": "integer",
            "description": "The time in seconds until the access token expires.",
            "format": "int32",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token to refresh the access token.",
            "nullable": true
          },
          "id_token": {
            "type": "string",
            "description": "The id token to identify the user."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token. Usually, this is \"Bearer\"."
          },
          "scope": {
            "type": "string",
            "description": "The scope of access the token has.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The access parameters of the newly registered temporary customer."
      },
      "AddValidationRapidModel": {
        "required": [
          "metadata",
          "payload",
          "truth"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "description": "The payload to use for the rapid.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "Some metadata to attach to the rapid."
          },
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "description": "The ground truth for the rapid.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "randomCorrectProbability": {
            "type": "number",
            "description": "The probability for an answer to be correct when randomly guessing.",
            "format": "double",
            "nullable": true
          },
          "explanation": {
            "type": "string",
            "description": "An explanation for the users if they answer the rapid incorrectly.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for adding a validation rapid."
      },
      "AddValidationRapidResult": {
        "required": [
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddValidationTextRapidModel": {
        "required": [
          "metadata",
          "payload",
          "texts",
          "truth"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "description": "The payload to use for the rapid.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PrivateTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptAssetMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/PublicTextMetadataInput"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "Some metadata to attach to the rapid."
          },
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "description": "The ground truth for the rapid.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The texts to use for the rapid."
          },
          "randomCorrectProbability": {
            "type": "number",
            "description": "The probability for an answer to be correct when randomly guessing.",
            "format": "double",
            "nullable": true
          },
          "explanation": {
            "type": "string",
            "description": "An explanation for the users if they answer the rapid incorrectly.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for adding a validation rapid."
      },
      "AttachCategoryTruth": {
        "title": "AttachCategoryTruth",
        "required": [
          "_t",
          "correctCategories"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AttachCategoryTruth"
            ],
            "type": "string",
            "description": "Discriminator value for AttachCategoryTruth",
            "default": "AttachCategoryTruth",
            "example": "AttachCategoryTruth"
          },
          "correctCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "BoundingBoxPayload": {
        "title": "BoundingBoxPayload",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "BoundingBoxPayload"
            ],
            "type": "string",
            "description": "Discriminator value for BoundingBoxPayload",
            "default": "BoundingBoxPayload",
            "example": "BoundingBoxPayload"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BoundingBoxTruth": {
        "title": "BoundingBoxTruth",
        "required": [
          "_t",
          "xMax",
          "xMin",
          "yMax",
          "yMin"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "BoundingBoxTruth"
            ],
            "type": "string",
            "description": "Discriminator value for BoundingBoxTruth",
            "default": "BoundingBoxTruth",
            "example": "BoundingBoxTruth"
          },
          "xMin": {
            "type": "number",
            "format": "double"
          },
          "yMin": {
            "type": "number",
            "format": "double"
          },
          "xMax": {
            "type": "number",
            "format": "double"
          },
          "yMax": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BoxShape": {
        "title": "BoxShape",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "BoxShape"
            ],
            "type": "string",
            "description": "Discriminator value for BoxShape",
            "default": "BoxShape",
            "example": "BoxShape"
          },
          "xMin": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "yMin": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "xMax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "yMax": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClassifyPayload": {
        "title": "ClassifyPayload",
        "required": [
          "_t",
          "possibleCategories",
          "title"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ClassifyPayload"
            ],
            "type": "string",
            "description": "Discriminator value for ClassifyPayload",
            "default": "ClassifyPayload",
            "example": "ClassifyPayload"
          },
          "possibleCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ComparePayload": {
        "title": "ComparePayload",
        "required": [
          "_t",
          "criteria"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ComparePayload"
            ],
            "type": "string",
            "description": "Discriminator value for ComparePayload",
            "default": "ComparePayload",
            "example": "ComparePayload"
          },
          "criteria": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CompareTruth": {
        "title": "CompareTruth",
        "required": [
          "_t",
          "winnerId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareTruth"
            ],
            "type": "string",
            "description": "Discriminator value for CompareTruth",
            "default": "CompareTruth",
            "example": "CompareTruth"
          },
          "winnerId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateEmptyValidationSetResult": {
        "required": [
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "validationSetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateValidationSetModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the validation set."
          }
        },
        "additionalProperties": false,
        "description": "The body request for creating a new validation set."
      },
      "EmptyValidationTruth": {
        "title": "EmptyValidationTruth",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EmptyValidationTruth"
            ],
            "type": "string",
            "description": "Discriminator value for EmptyValidationTruth",
            "default": "EmptyValidationTruth",
            "example": "EmptyValidationTruth"
          }
        },
        "additionalProperties": false
      },
      "FileAssetInput2": {
        "title": "FileAssetInput",
        "required": [
          "_t",
          "file"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for FileAssetInput",
            "default": "FileAssetInput",
            "example": "FileAssetInput"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ProxyFileWrapper"
              },
              {
                "$ref": "#/components/schemas/StreamFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ZipEntryFileWrapper"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FreeTextPayload": {
        "title": "FreeTextPayload",
        "required": [
          "_t",
          "question"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FreeTextPayload"
            ],
            "type": "string",
            "description": "Discriminator value for FreeTextPayload",
            "default": "FreeTextPayload",
            "example": "FreeTextPayload"
          },
          "question": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetAvailableValidationSetsResult": {
        "required": [
          "validationSets"
        ],
        "type": "object",
        "properties": {
          "validationSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationSetOverviewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "GetValidationRapidsResult": {
        "required": [
          "correctValidationCount",
          "id",
          "invalidValidationCount",
          "metadata",
          "payload",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "correctValidationCount": {
            "type": "integer",
            "format": "int32"
          },
          "invalidValidationCount": {
            "type": "integer",
            "format": "int32"
          },
          "explanation": {
            "type": "string",
            "nullable": true
          },
          "randomCorrectProbability": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "state": {
            "enum": [
              "Labeling",
              "Paused",
              "Incomplete",
              "Flagged",
              "Done",
              "None"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetValidationRapidsResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetValidationRapidsResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetValidationSetByIdResult": {
        "required": [
          "createdAt",
          "id",
          "name",
          "ownerMail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerMail": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ImportValidationSetFromFileResult": {
        "required": [
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "validationSetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinePayload": {
        "title": "LinePayload",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LinePayload"
            ],
            "type": "string",
            "description": "Discriminator value for LinePayload",
            "default": "LinePayload",
            "example": "LinePayload"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LineTruth": {
        "title": "LineTruth",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LineTruth"
            ],
            "type": "string",
            "description": "Discriminator value for LineTruth",
            "default": "LineTruth",
            "example": "LineTruth"
          }
        },
        "additionalProperties": false
      },
      "LocateBoxTruth": {
        "title": "LocateBoxTruth",
        "required": [
          "_t",
          "boundingBoxes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocateBoxTruth"
            ],
            "type": "string",
            "description": "Discriminator value for LocateBoxTruth",
            "default": "LocateBoxTruth",
            "example": "LocateBoxTruth"
          },
          "boundingBoxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoxShape"
            }
          }
        },
        "additionalProperties": false
      },
      "LocatePayload": {
        "title": "LocatePayload",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocatePayload"
            ],
            "type": "string",
            "description": "Discriminator value for LocatePayload",
            "default": "LocatePayload",
            "example": "LocatePayload"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MultiAssetInput2": {
        "title": "MultiAssetInput",
        "required": [
          "_t",
          "assets"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAssetInput",
            "default": "MultiAssetInput",
            "example": "MultiAssetInput"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAssetInput2"
                },
                {
                  "$ref": "#/components/schemas/MultiAssetInput2"
                },
                {
                  "$ref": "#/components/schemas/TextAssetInput"
                },
                {
                  "$ref": "#/components/schemas/UrlAssetInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MultiCompareTruth": {
        "title": "MultiCompareTruth",
        "required": [
          "_t",
          "correctCombinations"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiCompareTruth"
            ],
            "type": "string",
            "description": "Discriminator value for MultiCompareTruth",
            "default": "MultiCompareTruth",
            "example": "MultiCompareTruth"
          },
          "correctCombinations": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "NamedClassification": {
        "title": "NamedClassification",
        "required": [
          "_t",
          "classification",
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NamedClassification"
            ],
            "type": "string",
            "description": "Discriminator value for NamedClassification",
            "default": "NamedClassification",
            "example": "NamedClassification"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "classification": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NamedEntityPayload": {
        "title": "NamedEntityPayload",
        "required": [
          "_t",
          "classes",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NamedEntityPayload"
            ],
            "type": "string",
            "description": "Discriminator value for NamedEntityPayload",
            "default": "NamedEntityPayload",
            "example": "NamedEntityPayload"
          },
          "target": {
            "type": "string"
          },
          "classes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "NamedEntityTruth": {
        "title": "NamedEntityTruth",
        "required": [
          "_t",
          "classifications"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NamedEntityTruth"
            ],
            "type": "string",
            "description": "Discriminator value for NamedEntityTruth",
            "default": "NamedEntityTruth",
            "example": "NamedEntityTruth"
          },
          "classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedClassification"
            }
          }
        },
        "additionalProperties": false
      },
      "PolygonPayload": {
        "title": "PolygonPayload",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PolygonPayload"
            ],
            "type": "string",
            "description": "Discriminator value for PolygonPayload",
            "default": "PolygonPayload",
            "example": "PolygonPayload"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PolygonTruth": {
        "title": "PolygonTruth",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PolygonTruth"
            ],
            "type": "string",
            "description": "Discriminator value for PolygonTruth",
            "default": "PolygonTruth",
            "example": "PolygonTruth"
          }
        },
        "additionalProperties": false
      },
      "RapidState": {
        "enum": [
          "Labeling",
          "Paused",
          "Incomplete",
          "Flagged",
          "Done",
          "None"
        ],
        "type": "string"
      },
      "ScrubPayload": {
        "title": "ScrubPayload",
        "required": [
          "_t",
          "target"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ScrubPayload"
            ],
            "type": "string",
            "description": "Discriminator value for ScrubPayload",
            "default": "ScrubPayload",
            "example": "ScrubPayload"
          },
          "target": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScrubRange": {
        "required": [
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScrubTruth": {
        "title": "ScrubTruth",
        "required": [
          "_t",
          "validRanges"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ScrubTruth"
            ],
            "type": "string",
            "description": "Discriminator value for ScrubTruth",
            "default": "ScrubTruth",
            "example": "ScrubTruth"
          },
          "validRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScrubRange"
            }
          }
        },
        "additionalProperties": false
      },
      "SkipTruth": {
        "title": "SkipTruth",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SkipTruth"
            ],
            "type": "string",
            "description": "Discriminator value for SkipTruth",
            "default": "SkipTruth",
            "example": "SkipTruth"
          }
        },
        "additionalProperties": false
      },
      "SubmitCocoModel": {
        "required": [
          "categories",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the validation set."
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A subset of the categories from the CoCo set to use in the rapids."
          }
        },
        "additionalProperties": false,
        "description": "The model for submitting a CoCo set."
      },
      "SubmitCocoResult": {
        "required": [
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "validationSetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranscriptionPayload": {
        "title": "TranscriptionPayload",
        "required": [
          "_t",
          "title",
          "transcription"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionPayload"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionPayload",
            "default": "TranscriptionPayload",
            "example": "TranscriptionPayload"
          },
          "title": {
            "type": "string"
          },
          "transcription": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptionWord"
            }
          }
        },
        "additionalProperties": false
      },
      "TranscriptionTruth": {
        "title": "TranscriptionTruth",
        "required": [
          "_t",
          "correctWords"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionTruth"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionTruth",
            "default": "TranscriptionTruth",
            "example": "TranscriptionTruth"
          },
          "correctWords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptionWord"
            }
          },
          "strictGrading": {
            "type": "boolean",
            "nullable": true
          },
          "requiredPrecision": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "requiredCompleteness": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TranscriptionWord": {
        "required": [
          "word",
          "wordIndex"
        ],
        "type": "object",
        "properties": {
          "word": {
            "type": "string"
          },
          "wordIndex": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateDimensionsModel": {
        "required": [
          "dimensions"
        ],
        "type": "object",
        "properties": {
          "dimensions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "The model for updating the dimensions of all rapids within a validation set."
      },
      "UpdateShouldAlertModel": {
        "required": [
          "shouldAlert"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "If the users should be alerted if answering wrong."
          }
        },
        "additionalProperties": false,
        "description": "The model for updating the shouldAlert field of all rapids within a validation set."
      },
      "UploadCocoResult": {
        "required": [
          "categories",
          "cocoSetId",
          "dataCount"
        ],
        "type": "object",
        "properties": {
          "dataCount": {
            "type": "integer",
            "format": "int64"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cocoSetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ValidationSetModel": {
        "required": [
          "createdAt",
          "id",
          "name",
          "ownerId",
          "ownerMail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "ownerMail": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ValidationSetModelPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationSetModel"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ValidationSetOverviewModel": {
        "required": [
          "id",
          "name",
          "ownerId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AddUserResponseResult": {
        "required": [
          "isAccepted",
          "userScore"
        ],
        "type": "object",
        "properties": {
          "isAccepted": {
            "type": "boolean"
          },
          "validationTruth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "explanation": {
            "$ref": "#/components/schemas/TranslatedString"
          },
          "userScore": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AreRapidsActiveResult": {
        "required": [
          "isValid"
        ],
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AttachCategoryResult": {
        "title": "AttachCategoryResult",
        "required": [
          "_t",
          "category",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AttachCategoryResult"
            ],
            "type": "string",
            "description": "Discriminator value for AttachCategoryResult",
            "default": "AttachCategoryResult",
            "example": "AttachCategoryResult"
          },
          "category": {
            "type": "string"
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BoundingBoxResult": {
        "title": "BoundingBoxResult",
        "required": [
          "_t",
          "boundingBoxes",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "BoundingBoxResult"
            ],
            "type": "string",
            "description": "Discriminator value for BoundingBoxResult",
            "default": "BoundingBoxResult",
            "example": "BoundingBoxResult"
          },
          "boundingBoxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoxShape"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CompareResult": {
        "title": "CompareResult",
        "required": [
          "_t",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareResult"
            ],
            "type": "string",
            "description": "Discriminator value for CompareResult",
            "default": "CompareResult",
            "example": "CompareResult"
          },
          "winners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coordinate": {
        "title": "Coordinate",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "Coordinate"
            ],
            "type": "string",
            "description": "Discriminator value for Coordinate",
            "default": "Coordinate",
            "example": "Coordinate"
          },
          "x": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "y": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDemographicRapidModel": {
        "required": [
          "key",
          "payload"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The identifier of the demographic classification."
          },
          "payload": {
            "$ref": "#/components/schemas/ClassifyPayload"
          }
        },
        "additionalProperties": false,
        "description": "The model for creating a demographic rapid."
      },
      "CreateRapidResult": {
        "required": [
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FreeTextResult": {
        "title": "FreeTextResult",
        "required": [
          "_t",
          "answer",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FreeTextResult"
            ],
            "type": "string",
            "description": "Discriminator value for FreeTextResult",
            "default": "FreeTextResult",
            "example": "FreeTextResult"
          },
          "answer": {
            "type": "string"
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetRapidResponsesResult": {
        "required": [
          "asset",
          "rapidId",
          "responses",
          "state"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RapidResponse"
            }
          },
          "state": {
            "enum": [
              "Labeling",
              "Paused",
              "Incomplete",
              "Flagged",
              "Done",
              "None"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "InspectReportResult": {
        "type": "object",
        "properties": {
          "dump": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Line": {
        "title": "Line",
        "required": [
          "_t",
          "points",
          "size"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "Line"
            ],
            "type": "string",
            "description": "Discriminator value for Line",
            "default": "Line",
            "example": "Line"
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinePoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LinePoint": {
        "title": "LinePoint",
        "required": [
          "_t",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LinePoint"
            ],
            "type": "string",
            "description": "Discriminator value for LinePoint",
            "default": "LinePoint",
            "example": "LinePoint"
          },
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LineResult": {
        "title": "LineResult",
        "required": [
          "_t",
          "lines",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LineResult"
            ],
            "type": "string",
            "description": "Discriminator value for LineResult",
            "default": "LineResult",
            "example": "LineResult"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Line"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocateCoordinate": {
        "title": "LocateCoordinate",
        "required": [
          "_t",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocateCoordinate"
            ],
            "type": "string",
            "description": "Discriminator value for LocateCoordinate",
            "default": "LocateCoordinate",
            "example": "LocateCoordinate"
          },
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LocateResult": {
        "title": "LocateResult",
        "required": [
          "_t",
          "coordinates",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocateResult"
            ],
            "type": "string",
            "description": "Discriminator value for LocateResult",
            "default": "LocateResult",
            "example": "LocateResult"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocateCoordinate"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NaiveRefereeInfo": {
        "title": "NaiveRefereeInfo",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NaiveRefereeInfo"
            ],
            "type": "string",
            "description": "Discriminator value for NaiveRefereeInfo",
            "default": "NaiveRefereeInfo",
            "example": "NaiveRefereeInfo"
          },
          "guessAmountThreshold": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NamedEntityResult": {
        "title": "NamedEntityResult",
        "required": [
          "_t",
          "classifications",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NamedEntityResult"
            ],
            "type": "string",
            "description": "Discriminator value for NamedEntityResult",
            "default": "NamedEntityResult",
            "example": "NamedEntityResult"
          },
          "classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedClassification"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NeverEndingRefereeInfo": {
        "title": "NeverEndingRefereeInfo",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NeverEndingRefereeInfo"
            ],
            "type": "string",
            "description": "Discriminator value for NeverEndingRefereeInfo",
            "default": "NeverEndingRefereeInfo",
            "example": "NeverEndingRefereeInfo"
          }
        },
        "additionalProperties": false
      },
      "PolygonResult": {
        "title": "PolygonResult",
        "required": [
          "_t",
          "rapidId",
          "shapes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PolygonResult"
            ],
            "type": "string",
            "description": "Discriminator value for PolygonResult",
            "default": "PolygonResult",
            "example": "PolygonResult"
          },
          "shapes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shape"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PotentialValidationRapid": {
        "required": [
          "confidence",
          "payload",
          "rapidId",
          "responseCount",
          "truth"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string"
          },
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "responseCount": {
            "type": "integer",
            "format": "int32"
          },
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "PotentialValidationRapidPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PotentialValidationRapid"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProbabilisticAttachCategoryRefereeInfo": {
        "title": "ProbabilisticAttachCategoryRefereeInfo",
        "required": [
          "_t",
          "maxVotes",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ProbabilisticAttachCategoryRefereeInfo"
            ],
            "type": "string",
            "description": "Discriminator value for ProbabilisticAttachCategoryRefereeInfo",
            "default": "ProbabilisticAttachCategoryRefereeInfo",
            "example": "ProbabilisticAttachCategoryRefereeInfo"
          },
          "threshold": {
            "type": "number",
            "format": "double"
          },
          "maxVotes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "QueryValidationModel": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "filter": {
            "$ref": "#/components/schemas/RootFilter"
          }
        },
        "additionalProperties": false,
        "description": "The Query Model specific to the validation rapid eligibility query."
      },
      "RapidIssue": {
        "enum": [
          "Other",
          "CannotSubmit",
          "NoAsset",
          "Inappropriate",
          "NoCorrectOption",
          "WrongLanguage",
          "DoNotUnderstand",
          "DoNotCare",
          "NotSeeOptionsOrMediaDidntLoad",
          "MyAnswerIsCorrect"
        ],
        "type": "string"
      },
      "RapidModel": {
        "required": [
          "asset",
          "hasResponses",
          "id",
          "metadata",
          "payload",
          "referee",
          "shouldAcceptIncorrect",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeInfo"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeInfo"
              },
              {
                "$ref": "#/components/schemas/NaiveRefereeInfo"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/CountMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/DemographicMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TextMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/TranslatedPromptMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadataModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "state": {
            "enum": [
              "Labeling",
              "Paused",
              "Incomplete",
              "Flagged",
              "Done",
              "None"
            ],
            "type": "string"
          },
          "hasResponses": {
            "type": "boolean"
          },
          "shouldAcceptIncorrect": {
            "type": "boolean"
          },
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "explanation": {
            "type": "string",
            "nullable": true
          },
          "randomCorrectProbability": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RapidModelPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RapidModel"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RapidResponse": {
        "required": [
          "country",
          "demographicInformation",
          "id",
          "result",
          "userId",
          "userScore",
          "userScores"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionResult"
              },
              {
                "$ref": "#/components/schemas/ScrubResult"
              },
              {
                "$ref": "#/components/schemas/PolygonResult"
              },
              {
                "$ref": "#/components/schemas/NamedEntityResult"
              },
              {
                "$ref": "#/components/schemas/LocateResult"
              },
              {
                "$ref": "#/components/schemas/LineResult"
              },
              {
                "$ref": "#/components/schemas/FreeTextResult"
              },
              {
                "$ref": "#/components/schemas/CompareResult"
              },
              {
                "$ref": "#/components/schemas/SkipResult"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryResult"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxResult"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "userScore": {
            "type": "number",
            "format": "double"
          },
          "userScores": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "demographicInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "RapidResultModel": {
        "required": [
          "result",
          "sessionIndex"
        ],
        "type": "object",
        "properties": {
          "sessionIndex": {
            "type": "integer",
            "description": "The index of the session when the result was submitted.",
            "format": "int32"
          },
          "result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionResult"
              },
              {
                "$ref": "#/components/schemas/ScrubResult"
              },
              {
                "$ref": "#/components/schemas/PolygonResult"
              },
              {
                "$ref": "#/components/schemas/NamedEntityResult"
              },
              {
                "$ref": "#/components/schemas/LocateResult"
              },
              {
                "$ref": "#/components/schemas/LineResult"
              },
              {
                "$ref": "#/components/schemas/FreeTextResult"
              },
              {
                "$ref": "#/components/schemas/CompareResult"
              },
              {
                "$ref": "#/components/schemas/SkipResult"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryResult"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxResult"
              }
            ],
            "description": "The guess that was submitted.",
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false,
        "description": "The model for a Rapid result."
      },
      "RapidSkippedModel": {
        "required": [
          "rapidId",
          "sessionIndex"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string",
            "description": "The ID of the Rapid that was skipped."
          },
          "sessionIndex": {
            "type": "integer",
            "description": "The index of the session when the Rapid was skipped.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The model for a Rapid skipped."
      },
      "ReportModel": {
        "required": [
          "issue"
        ],
        "type": "object",
        "properties": {
          "issue": {
            "enum": [
              "Other",
              "CannotSubmit",
              "NoAsset",
              "Inappropriate",
              "NoCorrectOption",
              "WrongLanguage",
              "DoNotUnderstand",
              "DoNotCare",
              "NotSeeOptionsOrMediaDidntLoad",
              "MyAnswerIsCorrect"
            ],
            "type": "string"
          },
          "message": {
            "type": "string",
            "description": "An optional message typed by the user.",
            "nullable": true
          },
          "dump": {
            "type": "string",
            "description": "A dump, that the frontend defines and can read again.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "An optional identifier where the report originated from.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for reporting an issue with a rapid."
      },
      "ScrubResult": {
        "title": "ScrubResult",
        "required": [
          "_t",
          "rapidId",
          "timestamps"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ScrubResult"
            ],
            "type": "string",
            "description": "Discriminator value for ScrubResult",
            "default": "ScrubResult",
            "example": "ScrubResult"
          },
          "timestamps": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Shape": {
        "title": "Shape",
        "required": [
          "_t",
          "edges"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "Shape"
            ],
            "type": "string",
            "description": "Discriminator value for Shape",
            "default": "Shape",
            "example": "Shape"
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            }
          }
        },
        "additionalProperties": false
      },
      "SkipResult": {
        "title": "SkipResult",
        "required": [
          "_t",
          "rapidId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SkipResult"
            ],
            "type": "string",
            "description": "Discriminator value for SkipResult",
            "default": "SkipResult",
            "example": "SkipResult"
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranscriptionResult": {
        "title": "TranscriptionResult",
        "required": [
          "_t",
          "rapidId",
          "selectedWords"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionResult"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionResult",
            "default": "TranscriptionResult",
            "example": "TranscriptionResult"
          },
          "selectedWords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptionWord"
            }
          },
          "rapidId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateValidationRapidModel": {
        "required": [
          "randomCorrectProbability",
          "truth"
        ],
        "type": "object",
        "properties": {
          "truth": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionTruth"
              },
              {
                "$ref": "#/components/schemas/ScrubTruth"
              },
              {
                "$ref": "#/components/schemas/PolygonTruth"
              },
              {
                "$ref": "#/components/schemas/NamedEntityTruth"
              },
              {
                "$ref": "#/components/schemas/LocateBoxTruth"
              },
              {
                "$ref": "#/components/schemas/LineTruth"
              },
              {
                "$ref": "#/components/schemas/EmptyValidationTruth"
              },
              {
                "$ref": "#/components/schemas/CompareTruth"
              },
              {
                "$ref": "#/components/schemas/MultiCompareTruth"
              },
              {
                "$ref": "#/components/schemas/SkipTruth"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryTruth"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxTruth"
              }
            ],
            "description": "The truth for the validation rapid.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "explanation": {
            "type": "string",
            "description": "The optional explanation that will be shown to the user when answering wrong.",
            "nullable": true
          },
          "prompt": {
            "type": "string",
            "description": "The optional prompt that will be shown to the user.",
            "nullable": true
          },
          "randomCorrectProbability": {
            "type": "number",
            "description": "The probability that if the user answers at random that he'll be correct.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The model for updating a validation rapid."
      },
      "CompareWorkflowModel1": {
        "title": "CompareWorkflowModel",
        "required": [
          "_t",
          "criteria",
          "eloConfig",
          "id",
          "name",
          "pairMakerInformation",
          "referee",
          "state"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareWorkflowModel"
            ],
            "type": "string",
            "description": "Discriminator value for CompareWorkflowModel",
            "default": "CompareWorkflowModel",
            "example": "CompareWorkflowModel"
          },
          "id": {
            "type": "string"
          },
          "datasetId": {
            "type": "string",
            "nullable": true
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "pairMakerInformation": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OnlinePairMakerInformation"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "state": {
            "type": "string"
          },
          "criteria": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerMail": {
            "type": "string",
            "nullable": true
          },
          "eloConfig": {
            "$ref": "#/components/schemas/EloConfig"
          }
        },
        "additionalProperties": false
      },
      "EloConfig": {
        "type": "object",
        "properties": {
          "startingElo": {
            "type": "integer",
            "format": "int32"
          },
          "kFactor": {
            "type": "integer",
            "format": "int32"
          },
          "scalingFactor": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EvaluationWorkflowModel1": {
        "title": "EvaluationWorkflow",
        "required": [
          "_t",
          "id",
          "name",
          "referee",
          "state",
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EvaluationWorkflow"
            ],
            "type": "string",
            "description": "Discriminator value for EvaluationWorkflow",
            "default": "EvaluationWorkflow",
            "example": "EvaluationWorkflow"
          },
          "id": {
            "type": "string"
          },
          "validationSetId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "name": {
            "type": "string"
          },
          "ownerMail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCompareAbSummaryResult": {
        "required": [
          "winnerCounts"
        ],
        "type": "object",
        "properties": {
          "winnerCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "additionalProperties": false
      },
      "GetCompareWorkflowResultsModel": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "sortCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortCriterion"
            },
            "description": "A list of criteria to sort the results by.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for getting the overview of a compare workflow result."
      },
      "GetCompareWorkflowResultsResult": {
        "required": [
          "asset",
          "elo",
          "workflowDatapointId"
        ],
        "type": "object",
        "properties": {
          "workflowDatapointId": {
            "type": "string"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "elo": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetCompareWorkflowResultsResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCompareWorkflowResultsResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetResponsesResult": {
        "required": [
          "responses"
        ],
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RapidResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetSimpleWorkflowResultsModel": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RapidState"
            },
            "description": "An optional list of states to filter the rapids by.",
            "nullable": true
          },
          "sortCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortCriterion"
            },
            "description": "A list of criteria to sort the results by.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for getting the overview of a simple workflow result."
      },
      "GetWorkflowByIdResult": {
        "required": [
          "workflow"
        ],
        "type": "object",
        "properties": {
          "workflow": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompareWorkflowModel1"
              },
              {
                "$ref": "#/components/schemas/EvaluationWorkflowModel1"
              },
              {
                "$ref": "#/components/schemas/SimpleWorkflowModel1"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "GetWorkflowProgressResult": {
        "required": [
          "completed",
          "completionPercentage",
          "state",
          "total"
        ],
        "type": "object",
        "properties": {
          "completionPercentage": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "completed": {
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "enum": [
              "Created",
              "Started",
              "Labeling",
              "Paused",
              "Done",
              "Failed"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetWorkflowResultsResult": {
        "required": [
          "asset",
          "payload",
          "rapidId",
          "responses",
          "state"
        ],
        "type": "object",
        "properties": {
          "rapidId": {
            "type": "string"
          },
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionPayload"
              },
              {
                "$ref": "#/components/schemas/ScrubPayload"
              },
              {
                "$ref": "#/components/schemas/PolygonPayload"
              },
              {
                "$ref": "#/components/schemas/NamedEntityPayload"
              },
              {
                "$ref": "#/components/schemas/LocatePayload"
              },
              {
                "$ref": "#/components/schemas/LinePayload"
              },
              {
                "$ref": "#/components/schemas/FreeTextPayload"
              },
              {
                "$ref": "#/components/schemas/ComparePayload"
              },
              {
                "$ref": "#/components/schemas/ClassifyPayload"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxPayload"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RapidResponse"
            }
          },
          "state": {
            "enum": [
              "Labeling",
              "Paused",
              "Incomplete",
              "Flagged",
              "Done",
              "None"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetWorkflowResultsResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetWorkflowResultsResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IWorkflowModelPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CompareWorkflowModel1"
                },
                {
                  "$ref": "#/components/schemas/EvaluationWorkflowModel1"
                },
                {
                  "$ref": "#/components/schemas/SimpleWorkflowModel1"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NaiveRefereeConfig": {
        "title": "NaiveRefereeConfig",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NaiveRefereeConfig"
            ],
            "type": "string",
            "description": "Discriminator value for NaiveRefereeConfig",
            "default": "NaiveRefereeConfig",
            "example": "NaiveRefereeConfig"
          },
          "guessesRequired": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NeverEndingRefereeConfig": {
        "title": "NeverEndingRefereeConfig",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NeverEndingRefereeConfig"
            ],
            "type": "string",
            "description": "Discriminator value for NeverEndingRefereeConfig",
            "default": "NeverEndingRefereeConfig",
            "example": "NeverEndingRefereeConfig"
          }
        },
        "additionalProperties": false
      },
      "OnlinePairMakerInformation": {
        "title": "OnlinePairMakerInformation",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OnlinePairMakerInformation"
            ],
            "type": "string",
            "description": "Discriminator value for OnlinePairMakerInformation",
            "default": "OnlinePairMakerInformation",
            "example": "OnlinePairMakerInformation"
          },
          "randomMatchesRatio": {
            "type": "number",
            "format": "float"
          },
          "totalComparisonBudget": {
            "type": "integer",
            "format": "int32"
          },
          "currentComparisonBudget": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProbabilisticAttachCategoryRefereeConfig": {
        "title": "ProbabilisticAttachCategoryRefereeConfig",
        "required": [
          "_t",
          "maxVotes",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ProbabilisticAttachCategoryRefereeConfig"
            ],
            "type": "string",
            "description": "Discriminator value for ProbabilisticAttachCategoryRefereeConfig",
            "default": "ProbabilisticAttachCategoryRefereeConfig",
            "example": "ProbabilisticAttachCategoryRefereeConfig"
          },
          "threshold": {
            "type": "number",
            "format": "double"
          },
          "maxVotes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SimpleWorkflowModel1": {
        "title": "SimpleWorkflowModel",
        "required": [
          "_t",
          "blueprint",
          "id",
          "name",
          "referee",
          "state"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SimpleWorkflowModel"
            ],
            "type": "string",
            "description": "Discriminator value for SimpleWorkflowModel",
            "default": "SimpleWorkflowModel",
            "example": "SimpleWorkflowModel"
          },
          "id": {
            "type": "string"
          },
          "datasetId": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string"
          },
          "blueprint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/ScrubRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/PolygonRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/NamedEntityRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LocateRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LineRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/FreeTextRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/CompareRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxRapidBlueprint"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "name": {
            "type": "string"
          },
          "ownerMail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowState": {
        "enum": [
          "Created",
          "Started",
          "Labeling",
          "Paused",
          "Done",
          "Failed"
        ],
        "type": "string"
      },
      "AddCampaignArtifactResult": {
        "required": [
          "campaignId"
        ],
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddCampaignModel": {
        "title": "AddCampaignModel",
        "required": [
          "_t",
          "campaignName",
          "featureFlags",
          "priority"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AddCampaignModel"
            ],
            "type": "string",
            "description": "Discriminator value for AddCampaignModel",
            "default": "AddCampaignModel",
            "example": "AddCampaignModel"
          },
          "artifactId": {
            "type": "string",
            "description": "The id of the campaign artifact. If not provided a random value will be used.",
            "nullable": true
          },
          "campaignName": {
            "type": "string",
            "description": "The name of the campaign."
          },
          "userFilters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AgeUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/AndUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CampaignUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CountryUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/CustomUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/GenderUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/LanguageUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NewUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/NotUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/OrUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/ResponseCountUserFilterModel"
                },
                {
                  "$ref": "#/components/schemas/UserScoreUserFilterModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The user filters to apply to the campaign.",
            "nullable": true
          },
          "validationSetId": {
            "type": "string",
            "description": "A validation set that should be used.",
            "nullable": true
          },
          "selections": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AbTestSelection"
                },
                {
                  "$ref": "#/components/schemas/CappedSelection"
                },
                {
                  "$ref": "#/components/schemas/ConditionalValidationSelection"
                },
                {
                  "$ref": "#/components/schemas/DemographicSelection"
                },
                {
                  "$ref": "#/components/schemas/EffortCappedSelection"
                },
                {
                  "$ref": "#/components/schemas/LabelingSelection"
                },
                {
                  "$ref": "#/components/schemas/ShufflingSelection"
                },
                {
                  "$ref": "#/components/schemas/StaticSelection"
                },
                {
                  "$ref": "#/components/schemas/ValidationSelection"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The selections that the campaign should have.",
            "nullable": true
          },
          "retrievalMode": {
            "enum": [
              "Random",
              "Shuffled",
              "Sequential"
            ],
            "type": "string",
            "description": "The retrieval mode defines how rapids are retrieved from the active labeling pool.",
            "nullable": true
          },
          "maxIterations": {
            "type": "integer",
            "description": "The maximum number of times a user is allowed to see the same rapid.",
            "format": "int32",
            "nullable": true
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureFlag"
            },
            "description": "The feature flags that should be applied to the campaign."
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the campaign.",
            "format": "int32"
          },
          "isSticky": {
            "type": "boolean",
            "description": "Indicates if the campaign is sticky.",
            "nullable": true
          },
          "isPreviewEnabled": {
            "type": "boolean",
            "description": "A flag to indicate whether the campaign should be put into preview mode after creation.\nThis way the campaign will not start automatically and the user will have to manually start it.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model for adding a campaign to an existing pipeline."
      },
      "AssetMetadata": {
        "title": "AssetMetadata",
        "required": [
          "_t",
          "asset",
          "visibilities"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "AssetMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for AssetMetadata",
            "default": "AssetMetadata",
            "example": "AssetMetadata"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAsset"
              },
              {
                "$ref": "#/components/schemas/MultiAsset"
              },
              {
                "$ref": "#/components/schemas/NullAsset"
              },
              {
                "$ref": "#/components/schemas/TextAsset"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CampaignArtifactModel": {
        "title": "CampaignArtifactModel",
        "required": [
          "_t",
          "campaignId",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CampaignArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for CampaignArtifactModel",
            "default": "CampaignArtifactModel",
            "example": "CampaignArtifactModel"
          },
          "campaignId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ClassificationMetadata": {
        "title": "ClassificationMetadata",
        "required": [
          "_t",
          "classification"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ClassificationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for ClassificationMetadata",
            "default": "ClassificationMetadata",
            "example": "ClassificationMetadata"
          },
          "classification": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CompareWorkflowConfig": {
        "title": "CompareWorkflowConfig",
        "required": [
          "_t",
          "criteria",
          "metadata",
          "referee",
          "targetCountryCodes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareWorkflowConfig"
            ],
            "type": "string",
            "description": "Discriminator value for CompareWorkflowConfig",
            "default": "CompareWorkflowConfig",
            "example": "CompareWorkflowConfig"
          },
          "criteria": {
            "type": "string"
          },
          "eloConfig": {
            "$ref": "#/components/schemas/EloConfig"
          },
          "pairMakerConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OnlinePairMakerConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "targetCountryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "CompareWorkflowConfigModel": {
        "title": "CompareWorkflowConfig",
        "required": [
          "_t",
          "criteria",
          "metadata",
          "pairMakerConfig",
          "referee",
          "targetCountryCodes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CompareWorkflowConfig"
            ],
            "type": "string",
            "description": "Discriminator value for CompareWorkflowConfig",
            "default": "CompareWorkflowConfig",
            "example": "CompareWorkflowConfig"
          },
          "criteria": {
            "type": "string",
            "description": "The criteria to add to each compare rapid."
          },
          "pairMakerConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OnlinePairMakerConfig"
              }
            ],
            "description": "The PairMaker Algorithm's config that is used for making matchups",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "targetCountryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of country codes that this workflow is targeting."
          },
          "eloConfig": {
            "$ref": "#/components/schemas/EloConfig"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            },
            "description": "The metadata is attached to every single rapid and can be used for something like the prompt."
          }
        },
        "additionalProperties": false,
        "description": "The configuration for creating a compare workflow.\nA compare workflow is a workflow that continuously matches datapoints against each other and updates their\nrespective ELO scores. The ELO scores are used to determine the relative strength of the datapoints,\nand datapoints are matched against other datapoints with similar ELO scores.\nThe end goal is a ranking of the datapoints based on their relative strength."
      },
      "CountMetadata": {
        "title": "CountMetadata",
        "required": [
          "_t",
          "count"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "CountMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for CountMetadata",
            "default": "CountMetadata",
            "example": "CountMetadata"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DatasetArtifactModel": {
        "title": "DatasetArtifactModel",
        "required": [
          "_t",
          "datasetId",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "DatasetArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for DatasetArtifactModel",
            "default": "DatasetArtifactModel",
            "example": "DatasetArtifactModel"
          },
          "datasetId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EvaluationWorkflowConfig": {
        "title": "EvaluationWorkflowConfig",
        "required": [
          "_t",
          "referee",
          "shouldAcceptIncorrect",
          "validationSetId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "EvaluationWorkflowConfig"
            ],
            "type": "string",
            "description": "Discriminator value for EvaluationWorkflowConfig",
            "default": "EvaluationWorkflowConfig",
            "example": "EvaluationWorkflowConfig"
          },
          "validationSetId": {
            "type": "string"
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "shouldAcceptIncorrect": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FeatureFlag": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FileArtifactModel": {
        "title": "FileArtifactModel",
        "required": [
          "_t",
          "fileName",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for FileArtifactModel",
            "default": "FileArtifactModel",
            "example": "FileArtifactModel"
          },
          "fileName": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FileAsset": {
        "title": "FileAsset",
        "required": [
          "_t",
          "fileName"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAsset"
            ],
            "type": "string",
            "description": "Discriminator value for FileAsset",
            "default": "FileAsset",
            "example": "FileAsset"
          },
          "fileName": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "FileTypeMetadata": {
        "title": "FileTypeMetadata",
        "required": [
          "_t",
          "fileType"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileTypeMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for FileTypeMetadata",
            "default": "FileTypeMetadata",
            "example": "FileTypeMetadata"
          },
          "fileType": {
            "enum": [
              "Unknown",
              "Image",
              "Video",
              "Audio"
            ],
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPipelineByIdResult": {
        "required": [
          "artifacts",
          "featureFlags"
        ],
        "type": "object",
        "properties": {
          "artifacts": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CampaignArtifactModel"
                },
                {
                  "$ref": "#/components/schemas/DatasetArtifactModel"
                },
                {
                  "$ref": "#/components/schemas/FileArtifactModel"
                },
                {
                  "$ref": "#/components/schemas/WorkflowArtifactModel"
                },
                {
                  "$ref": "#/components/schemas/WorkflowConfigArtifactModel"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "featureFlags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureFlag"
            }
          }
        },
        "additionalProperties": false
      },
      "ImageDimensionMetadata": {
        "title": "ImageDimensionMetadata",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "ImageDimensionMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for ImageDimensionMetadata",
            "default": "ImageDimensionMetadata",
            "example": "ImageDimensionMetadata"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocationMetadata": {
        "title": "LocationMetadata",
        "required": [
          "_t",
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "LocationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for LocationMetadata",
            "default": "LocationMetadata",
            "example": "LocationMetadata"
          },
          "x": {
            "type": "number",
            "format": "float"
          },
          "y": {
            "type": "number",
            "format": "float"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MetadataVisibilities": {
        "enum": [
          "None",
          "Users",
          "Customers",
          "Admins",
          "Dashboard",
          "All"
        ],
        "type": "string"
      },
      "MultiAsset": {
        "title": "MultiAsset",
        "required": [
          "_t",
          "assets"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAsset"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAsset",
            "default": "MultiAsset",
            "example": "MultiAsset"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAsset"
                },
                {
                  "$ref": "#/components/schemas/MultiAsset"
                },
                {
                  "$ref": "#/components/schemas/NullAsset"
                },
                {
                  "$ref": "#/components/schemas/TextAsset"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "NullAsset": {
        "title": "NullAsset",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "NullAsset"
            ],
            "type": "string",
            "description": "Discriminator value for NullAsset",
            "default": "NullAsset",
            "example": "NullAsset"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "OnlinePairMakerConfig": {
        "title": "OnlinePairMakerConfig",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OnlinePairMakerConfig"
            ],
            "type": "string",
            "description": "Discriminator value for OnlinePairMakerConfig",
            "default": "OnlinePairMakerConfig",
            "example": "OnlinePairMakerConfig"
          },
          "randomMatchesRatio": {
            "type": "number",
            "format": "float"
          },
          "totalComparisonBudget": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OriginalFilenameMetadata": {
        "title": "OriginalFilenameMetadata",
        "required": [
          "_t",
          "originalFilename"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "OriginalFilenameMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for OriginalFilenameMetadata",
            "default": "OriginalFilenameMetadata",
            "example": "OriginalFilenameMetadata"
          },
          "originalFilename": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PreliminaryDownloadModel": {
        "type": "object",
        "properties": {
          "sendEmail": {
            "type": "boolean",
            "description": "Whether to email the user when the download is ready.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "The model for creating a preliminary download."
      },
      "PreliminaryDownloadResult": {
        "required": [
          "downloadId"
        ],
        "type": "object",
        "properties": {
          "downloadId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PromptMetadata": {
        "title": "PromptMetadata",
        "required": [
          "_t",
          "prompt"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "PromptMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for PromptMetadata",
            "default": "PromptMetadata",
            "example": "PromptMetadata"
          },
          "prompt": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SimpleWorkflowConfig": {
        "title": "SimpleWorkflowConfig",
        "required": [
          "_t",
          "blueprint",
          "referee"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SimpleWorkflowConfig"
            ],
            "type": "string",
            "description": "Discriminator value for SimpleWorkflowConfig",
            "default": "SimpleWorkflowConfig",
            "example": "SimpleWorkflowConfig"
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "blueprint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/ScrubRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/PolygonRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/NamedEntityRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LocateRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LineRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/FreeTextRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/CompareRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxRapidBlueprint"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          }
        },
        "additionalProperties": false
      },
      "SimpleWorkflowConfigModel": {
        "title": "SimpleWorkflowConfig",
        "required": [
          "_t",
          "blueprint",
          "referee",
          "targetCountryCodes"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SimpleWorkflowConfig"
            ],
            "type": "string",
            "description": "Discriminator value for SimpleWorkflowConfig",
            "default": "SimpleWorkflowConfig",
            "example": "SimpleWorkflowConfig"
          },
          "referee": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NaiveRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/NeverEndingRefereeConfig"
              },
              {
                "$ref": "#/components/schemas/ProbabilisticAttachCategoryRefereeConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "blueprint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TranscriptionRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/ScrubRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/PolygonRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/NamedEntityRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LocateRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/LineRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/FreeTextRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/CompareRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/AttachCategoryRapidBlueprint"
              },
              {
                "$ref": "#/components/schemas/BoundingBoxRapidBlueprint"
              }
            ],
            "description": "The blueprint to use when creating rapids for this workflow.\nThe blueprint determines what kind of rapids will be created and what data they will contain.",
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "targetCountryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of country codes that this workflow is targeting."
          }
        },
        "additionalProperties": false,
        "description": "The configuration for a simple workflow.\nA simple workflow creates a rapid for each datapoint in its dataset.\nIt is considered complete when all rapids have been completed."
      },
      "SourceUrlMetadata": {
        "title": "SourceUrlMetadata",
        "required": [
          "_t",
          "url"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "SourceUrlMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for SourceUrlMetadata",
            "default": "SourceUrlMetadata",
            "example": "SourceUrlMetadata"
          },
          "url": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StreamsMetadata": {
        "title": "StreamsMetadata",
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "StreamsMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for StreamsMetadata",
            "default": "StreamsMetadata",
            "example": "StreamsMetadata"
          },
          "hasAudio": {
            "type": "boolean"
          },
          "hasVideo": {
            "type": "boolean"
          },
          "hasSubtitles": {
            "type": "boolean"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextAsset": {
        "title": "TextAsset",
        "required": [
          "_t",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TextAsset"
            ],
            "type": "string",
            "description": "Discriminator value for TextAsset",
            "default": "TextAsset",
            "example": "TextAsset"
          },
          "text": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssetMetadata"
                },
                {
                  "$ref": "#/components/schemas/ClassificationMetadata"
                },
                {
                  "$ref": "#/components/schemas/CountMetadata"
                },
                {
                  "$ref": "#/components/schemas/FileTypeMetadata"
                },
                {
                  "$ref": "#/components/schemas/ImageDimensionMetadata"
                },
                {
                  "$ref": "#/components/schemas/LocationMetadata"
                },
                {
                  "$ref": "#/components/schemas/OriginalFilenameMetadata"
                },
                {
                  "$ref": "#/components/schemas/PromptMetadata"
                },
                {
                  "$ref": "#/components/schemas/SourceUrlMetadata"
                },
                {
                  "$ref": "#/components/schemas/StreamsMetadata"
                },
                {
                  "$ref": "#/components/schemas/TextMetadata"
                },
                {
                  "$ref": "#/components/schemas/TranscriptionMetadata"
                },
                {
                  "$ref": "#/components/schemas/VideoDurationMetadata"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "TextMetadata": {
        "title": "TextMetadata",
        "required": [
          "_t",
          "text"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TextMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for TextMetadata",
            "default": "TextMetadata",
            "example": "TextMetadata"
          },
          "text": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TranscriptionMetadata": {
        "title": "TranscriptionMetadata",
        "required": [
          "_t",
          "transcription",
          "visibilities"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "TranscriptionMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for TranscriptionMetadata",
            "default": "TranscriptionMetadata",
            "example": "TranscriptionMetadata"
          },
          "transcription": {
            "type": "string"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateCampaignModel": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "A value above 0 indicating how much the campaign should be prioritized.\nThe higher the value the more weight it will be given during campaign selection.",
            "format": "int32",
            "nullable": true
          },
          "featureFlags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The feature flags to assign this campaign.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model containing the new configuration for a campaign."
      },
      "VideoDurationMetadata": {
        "title": "VideoDurationMetadata",
        "required": [
          "_t",
          "duration"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "VideoDurationMetadata"
            ],
            "type": "string",
            "description": "Discriminator value for VideoDurationMetadata",
            "default": "VideoDurationMetadata",
            "example": "VideoDurationMetadata"
          },
          "duration": {
            "type": "string",
            "format": "date-span"
          },
          "visibilities": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WorkflowArtifactModel": {
        "title": "WorkflowArtifactModel",
        "required": [
          "_t",
          "identifier",
          "workflowId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "WorkflowArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for WorkflowArtifactModel",
            "default": "WorkflowArtifactModel",
            "example": "WorkflowArtifactModel"
          },
          "workflowId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WorkflowConfigArtifactModel": {
        "title": "WorkflowConfigArtifactModel",
        "required": [
          "_t",
          "identifier",
          "workflowConfig"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "WorkflowConfigArtifactModel"
            ],
            "type": "string",
            "description": "Discriminator value for WorkflowConfigArtifactModel",
            "default": "WorkflowConfigArtifactModel",
            "example": "WorkflowConfigArtifactModel"
          },
          "workflowConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompareWorkflowConfig"
              },
              {
                "$ref": "#/components/schemas/EvaluationWorkflowConfig"
              },
              {
                "$ref": "#/components/schemas/SimpleWorkflowConfig"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BoostQueryResult": {
        "required": [
          "activeCampaigns",
          "inactiveCampaigns",
          "status",
          "unknownCampaigns"
        ],
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "Active",
              "Inactive",
              "Partial",
              "Unknown"
            ],
            "type": "string"
          },
          "activeCampaigns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inactiveCampaigns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unknownCampaigns": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "BoostStatus": {
        "enum": [
          "Active",
          "Inactive",
          "Partial",
          "Unknown"
        ],
        "type": "string"
      },
      "CampaignQueryResult": {
        "required": [
          "createdAt",
          "id",
          "name",
          "ownerMail",
          "priority",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ownerMail": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Created",
              "Preview",
              "Active",
              "Analysis",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CampaignQueryResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignQueryResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CampaignStatus": {
        "enum": [
          "Created",
          "Preview",
          "Active",
          "Analysis",
          "Paused",
          "Completed"
        ],
        "type": "string"
      },
      "BenchmarkQueryResult": {
        "required": [
          "createdAt",
          "id",
          "isManaged",
          "name",
          "ownerMail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isManaged": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerMail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BenchmarkQueryResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenchmarkQueryResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BoostLeaderboardModel": {
        "required": [
          "participants",
          "totalResponses"
        ],
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The participants of the given leaderboard that should be boosted."
          },
          "totalResponses": {
            "type": "integer",
            "description": "The amount of responses in total that should be added, shared across all participants.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The model for boosting a leaderboard."
      },
      "CreateBenchmarkModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the benchmark"
          }
        },
        "additionalProperties": false,
        "description": "The model for creating a benchmark."
      },
      "CreateBenchmarkParticipantModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the participant."
          }
        },
        "additionalProperties": false,
        "description": "The model to create a participant in a leaderboard"
      },
      "CreateBenchmarkParticipantResult": {
        "required": [
          "datasetId",
          "participantId"
        ],
        "type": "object",
        "properties": {
          "participantId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateBenchmarkResult": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateLeaderboardModel": {
        "required": [
          "instruction",
          "name",
          "showPrompt"
        ],
        "type": "object",
        "properties": {
          "benchmarkId": {
            "type": "string",
            "description": "If a leaderboard should be added to a preexisting benchmark, the benchmark Id can be provided.",
            "nullable": true
          },
          "benchmarkName": {
            "type": "string",
            "description": "If no BenchmarkId is provided a new benchmark will be created. if no name is supplied the benchmark\nwill be called the same as the leaderboard.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the leaderboard."
          },
          "instruction": {
            "type": "string",
            "description": "The instruction datapoints will be matched up against."
          },
          "showPrompt": {
            "type": "boolean",
            "description": "Indicates if the prompt is shown on the rapids."
          },
          "showPromptAsset": {
            "type": "boolean",
            "description": "Whether the prompt asset should be shown on the rapids."
          },
          "responseBudget": {
            "type": "integer",
            "description": "Total amount of responses that get collected per run",
            "format": "int32"
          },
          "minResponses": {
            "type": "integer",
            "description": "The minimum amount of responses that need to be collected per comparison.",
            "format": "int32"
          },
          "isInversed": {
            "type": "boolean",
            "description": "If the results should be inversed, meaning people should select the worse model."
          },
          "validationSetId": {
            "type": "string",
            "description": "The Validation set that should be attached to every run.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The CreateLeaderboardModel class represents the model for creating a leaderboard."
      },
      "CreateLeaderboardResult": {
        "required": [
          "benchmarkId",
          "id",
          "isInversed",
          "minResponses",
          "responseBudget",
          "showPrompt",
          "showPromptAsset"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "benchmarkId": {
            "type": "string"
          },
          "showPrompt": {
            "type": "boolean"
          },
          "showPromptAsset": {
            "type": "boolean"
          },
          "responseBudget": {
            "type": "integer",
            "format": "int32"
          },
          "minResponses": {
            "type": "integer",
            "format": "int32"
          },
          "isInversed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateSampleModel": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The identifier used to correlate samples of different participants."
          }
        },
        "additionalProperties": false,
        "description": "The model used to create a sample to a participant."
      },
      "FileAssetInput3": {
        "title": "FileAssetInput",
        "required": [
          "_t",
          "file"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "FileAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for FileAssetInput",
            "default": "FileAssetInput",
            "example": "FileAssetInput"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ProxyFileWrapper"
              },
              {
                "$ref": "#/components/schemas/StreamFileWrapper"
              },
              {
                "$ref": "#/components/schemas/ZipEntryFileWrapper"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetBenchmarkByIdResult": {
        "required": [
          "createdAt",
          "id",
          "name",
          "ownerMail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerMail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetLeaderboardByIdResult": {
        "required": [
          "id",
          "instruction",
          "isInversed",
          "minResponses",
          "name",
          "responseBudget",
          "showPrompt",
          "showPromptAsset"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "instruction": {
            "type": "string"
          },
          "showPrompt": {
            "type": "boolean"
          },
          "showPromptAsset": {
            "type": "boolean"
          },
          "isInversed": {
            "type": "boolean"
          },
          "responseBudget": {
            "type": "integer",
            "format": "int32"
          },
          "minResponses": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetParticipantByIdResult": {
        "required": [
          "benchmarkId",
          "datasetId",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "benchmarkId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetStandingByIdResult": {
        "required": [
          "benchmarkId",
          "datasetId",
          "id",
          "isDisabled",
          "name",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "benchmarkId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Created",
              "Active",
              "Idle"
            ],
            "type": "string"
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardQueryResult": {
        "required": [
          "id",
          "instruction",
          "isInversed",
          "minResponses",
          "name",
          "responseBudget",
          "showPrompt",
          "showPromptAsset"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "instruction": {
            "type": "string"
          },
          "showPrompt": {
            "type": "boolean"
          },
          "showPromptAsset": {
            "type": "boolean"
          },
          "isInversed": {
            "type": "boolean"
          },
          "responseBudget": {
            "type": "integer",
            "format": "int32"
          },
          "minResponses": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardQueryResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardQueryResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MultiAssetInput3": {
        "title": "MultiAssetInput",
        "required": [
          "_t",
          "assets"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "enum": [
              "MultiAssetInput"
            ],
            "type": "string",
            "description": "Discriminator value for MultiAssetInput",
            "default": "MultiAssetInput",
            "example": "MultiAssetInput"
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileAssetInput3"
                },
                {
                  "$ref": "#/components/schemas/MultiAssetInput3"
                },
                {
                  "$ref": "#/components/schemas/TextAssetInput"
                },
                {
                  "$ref": "#/components/schemas/UrlAssetInput"
                }
              ],
              "discriminator": {
                "propertyName": "_t"
              }
            }
          },
          "identifier": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ParticipantByBenchmark": {
        "required": [
          "benchmarkId",
          "datasetId",
          "id",
          "name",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "benchmarkId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Created",
              "Submitted",
              "Disabled"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ParticipantByBenchmarkPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantByBenchmark"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ParticipantStatus": {
        "enum": [
          "Created",
          "Submitted",
          "Disabled"
        ],
        "type": "string"
      },
      "PromptByBenchmarkResult": {
        "required": [
          "createdAt",
          "id",
          "identifier",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "promptAsset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "identifier": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "PromptByBenchmarkResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromptByBenchmarkResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RunStatus": {
        "enum": [
          "Queued",
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      },
      "RunsByLeaderboardResult": {
        "required": [
          "createdAt",
          "id",
          "name",
          "ownerMail",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Queued",
              "Running",
              "Completed",
              "Failed"
            ],
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerMail": {
            "type": "string"
          },
          "orderId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RunsByLeaderboardResultPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunsByLeaderboardResult"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SampleByParticipant": {
        "required": [
          "asset",
          "id",
          "identifier",
          "ownerMail",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "promptAsset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetModel"
              },
              {
                "$ref": "#/components/schemas/MultiAssetModel"
              },
              {
                "$ref": "#/components/schemas/NullAssetModel"
              },
              {
                "$ref": "#/components/schemas/TextAssetModel"
              }
            ],
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "ownerMail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SampleByParticipantPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SampleByParticipant"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StandingByLeaderboard": {
        "required": [
          "id",
          "isDisabled",
          "leaderboardId",
          "name",
          "status",
          "totalMatches",
          "wins"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "leaderboardId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string",
            "deprecated": true
          },
          "status": {
            "enum": [
              "Created",
              "Active",
              "Idle"
            ],
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "wins": {
            "type": "integer",
            "format": "int32"
          },
          "totalMatches": {
            "type": "integer",
            "format": "int32"
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "StandingByLeaderboardPagedResult": {
        "required": [
          "items",
          "page",
          "pageSize",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandingByLeaderboard"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StandingStatus": {
        "enum": [
          "Created",
          "Active",
          "Idle"
        ],
        "type": "string"
      },
      "StandingsByLeaderboardResult": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandingByLeaderboard"
            }
          }
        },
        "additionalProperties": false
      },
      "SubmitParticipantResult": {
        "required": [
          "invalidDatapoints",
          "validDatapoints"
        ],
        "type": "object",
        "properties": {
          "validDatapoints": {
            "type": "integer",
            "format": "int32"
          },
          "invalidDatapoints": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubmitPromptModel": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "An identifier associated to the prompt"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt",
            "default": null,
            "nullable": true
          },
          "promptAsset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileAssetInput3"
              },
              {
                "$ref": "#/components/schemas/MultiAssetInput3"
              },
              {
                "$ref": "#/components/schemas/TextAssetInput"
              },
              {
                "$ref": "#/components/schemas/UrlAssetInput"
              }
            ],
            "description": "",
            "default": null,
            "nullable": true,
            "discriminator": {
              "propertyName": "_t"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of a given prompt",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The model user for submitting a prompt to a benchmark."
      },
      "TagsByBenchmarkResult": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateBenchmarkNameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the benchmark."
          }
        },
        "additionalProperties": false,
        "description": "The model used to update the name of a benchmark."
      },
      "UpdateLeaderboardNameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the leaderboard."
          }
        },
        "additionalProperties": false,
        "description": "The model used to update the name of a leaderboard."
      },
      "UpdateLeaderboardResponseConfigModel": {
        "required": [
          "minResponses",
          "responseBudget"
        ],
        "type": "object",
        "properties": {
          "responseBudget": {
            "type": "integer",
            "description": "The amount of responses that will be collected when onboarding a new participant.",
            "format": "int32"
          },
          "minResponses": {
            "type": "integer",
            "description": "The amount of responses that will be collected as a minimum on each matchup.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The model used to update the name of a leaderboard."
      },
      "UpdateParticipantNameModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the participant."
          }
        },
        "additionalProperties": false,
        "description": "The model used to update the name of a participant."
      },
      "UpdatePromptTagsModel": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of tags to be associated with the prompt."
          }
        },
        "additionalProperties": false,
        "description": "The model for updating prompt tags."
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      },
      "oauth2": {
        "type": "openIdConnect",
        "description": "OAuth2 authorization code flow, supporting OpenID Connect.",
        "openIdConnectUrl": "https://auth.rabbitdata.ch/.well-known/openid-configuration"
      }
    }
  }
}