# coding: utf-8

"""
    Rapidata.Dataset

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from rapidata.api_client.models.add_user_response_result_validation_truth import AddUserResponseResultValidationTruth
from rapidata.api_client.models.translated_string import TranslatedString
from typing import Optional, Set
from typing_extensions import Self

class AddUserResponseResult(BaseModel):
    """
    AddUserResponseResult
    """ # noqa: E501
    is_accepted: StrictBool = Field(alias="isAccepted")
    validation_truth: Optional[AddUserResponseResultValidationTruth] = Field(default=None, alias="validationTruth")
    explanation: Optional[TranslatedString] = None
    user_score: Union[StrictFloat, StrictInt] = Field(alias="userScore")
    __properties: ClassVar[List[str]] = ["isAccepted", "validationTruth", "explanation", "userScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddUserResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of validation_truth
        if self.validation_truth:
            _dict['validationTruth'] = self.validation_truth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of explanation
        if self.explanation:
            _dict['explanation'] = self.explanation.to_dict()
        # set to None if validation_truth (nullable) is None
        # and model_fields_set contains the field
        if self.validation_truth is None and "validation_truth" in self.model_fields_set:
            _dict['validationTruth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddUserResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isAccepted": obj.get("isAccepted"),
            "validationTruth": AddUserResponseResultValidationTruth.from_dict(obj["validationTruth"]) if obj.get("validationTruth") is not None else None,
            "explanation": TranslatedString.from_dict(obj["explanation"]) if obj.get("explanation") is not None else None,
            "userScore": obj.get("userScore")
        })
        return _obj


