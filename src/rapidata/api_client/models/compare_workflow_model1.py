# coding: utf-8

"""
    Rapidata.Dataset

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rapidata.api_client.models.compare_workflow_config_referee import CompareWorkflowConfigReferee
from rapidata.api_client.models.feature_flag import FeatureFlag
from typing import Optional, Set
from typing_extensions import Self

class CompareWorkflowModel1(BaseModel):
    """
    CompareWorkflowModel1
    """ # noqa: E501
    t: StrictStr = Field(description="Discriminator value for CompareWorkflowModel", alias="_t")
    id: StrictStr
    dataset_id: Optional[StrictStr] = Field(alias="datasetId")
    target_country_codes: List[StrictStr] = Field(alias="targetCountryCodes")
    feature_flags: List[FeatureFlag] = Field(alias="featureFlags")
    referee: CompareWorkflowConfigReferee
    state: StrictStr
    priority: StrictStr
    criteria: StrictStr
    name: StrictStr
    owner_mail: Optional[StrictStr] = Field(alias="ownerMail")
    starting_elo: StrictInt = Field(alias="startingElo")
    k_factor: StrictInt = Field(alias="kFactor")
    match_size: StrictInt = Field(alias="matchSize")
    scaling_factor: StrictInt = Field(alias="scalingFactor")
    matches_until_completed: StrictInt = Field(alias="matchesUntilCompleted")
    __properties: ClassVar[List[str]] = ["_t", "id", "datasetId", "targetCountryCodes", "featureFlags", "referee", "state", "priority", "criteria", "name", "ownerMail", "startingElo", "kFactor", "matchSize", "scalingFactor", "matchesUntilCompleted"]

    @field_validator('t')
    def t_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CompareWorkflowModel']):
            raise ValueError("must be one of enum values ('CompareWorkflowModel')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompareWorkflowModel1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in feature_flags (list)
        _items = []
        if self.feature_flags:
            for _item_feature_flags in self.feature_flags:
                if _item_feature_flags:
                    _items.append(_item_feature_flags.to_dict())
            _dict['featureFlags'] = _items
        # override the default output from pydantic by calling `to_dict()` of referee
        if self.referee:
            _dict['referee'] = self.referee.to_dict()
        # set to None if dataset_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_id is None and "dataset_id" in self.model_fields_set:
            _dict['datasetId'] = None

        # set to None if owner_mail (nullable) is None
        # and model_fields_set contains the field
        if self.owner_mail is None and "owner_mail" in self.model_fields_set:
            _dict['ownerMail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompareWorkflowModel1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_t": obj.get("_t") if obj.get("_t") is not None else 'CompareWorkflowModel',
            "id": obj.get("id"),
            "datasetId": obj.get("datasetId"),
            "targetCountryCodes": obj.get("targetCountryCodes"),
            "featureFlags": [FeatureFlag.from_dict(_item) for _item in obj["featureFlags"]] if obj.get("featureFlags") is not None else None,
            "referee": CompareWorkflowConfigReferee.from_dict(obj["referee"]) if obj.get("referee") is not None else None,
            "state": obj.get("state"),
            "priority": obj.get("priority"),
            "criteria": obj.get("criteria"),
            "name": obj.get("name"),
            "ownerMail": obj.get("ownerMail"),
            "startingElo": obj.get("startingElo"),
            "kFactor": obj.get("kFactor"),
            "matchSize": obj.get("matchSize"),
            "scalingFactor": obj.get("scalingFactor"),
            "matchesUntilCompleted": obj.get("matchesUntilCompleted")
        })
        return _obj


