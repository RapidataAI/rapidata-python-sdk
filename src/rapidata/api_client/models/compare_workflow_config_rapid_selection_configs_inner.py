# coding: utf-8

"""
    Rapidata.Dataset

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from rapidata.api_client.models.conditional_validation_rapid_selection_config import ConditionalValidationRapidSelectionConfig
from rapidata.api_client.models.correlated_rapid_selection_config import CorrelatedRapidSelectionConfig
from rapidata.api_client.models.demographic_rapid_selection_config import DemographicRapidSelectionConfig
from rapidata.api_client.models.no_validation_workflow_rapid_selection_config import NoValidationWorkflowRapidSelectionConfig
from rapidata.api_client.models.only_validation_workflow_rapid_selection_config import OnlyValidationWorkflowRapidSelectionConfig
from rapidata.api_client.models.static_rapid_selection_config import StaticRapidSelectionConfig
from rapidata.api_client.models.validation_rapid_selection_config import ValidationRapidSelectionConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

COMPAREWORKFLOWCONFIGRAPIDSELECTIONCONFIGSINNER_ONE_OF_SCHEMAS = ["ConditionalValidationRapidSelectionConfig", "CorrelatedRapidSelectionConfig", "DemographicRapidSelectionConfig", "NoValidationWorkflowRapidSelectionConfig", "OnlyValidationWorkflowRapidSelectionConfig", "StaticRapidSelectionConfig", "ValidationRapidSelectionConfig"]

class CompareWorkflowConfigRapidSelectionConfigsInner(BaseModel):
    """
    CompareWorkflowConfigRapidSelectionConfigsInner
    """
    # data type: ConditionalValidationRapidSelectionConfig
    oneof_schema_1_validator: Optional[ConditionalValidationRapidSelectionConfig] = None
    # data type: CorrelatedRapidSelectionConfig
    oneof_schema_2_validator: Optional[CorrelatedRapidSelectionConfig] = None
    # data type: DemographicRapidSelectionConfig
    oneof_schema_3_validator: Optional[DemographicRapidSelectionConfig] = None
    # data type: NoValidationWorkflowRapidSelectionConfig
    oneof_schema_4_validator: Optional[NoValidationWorkflowRapidSelectionConfig] = None
    # data type: OnlyValidationWorkflowRapidSelectionConfig
    oneof_schema_5_validator: Optional[OnlyValidationWorkflowRapidSelectionConfig] = None
    # data type: StaticRapidSelectionConfig
    oneof_schema_6_validator: Optional[StaticRapidSelectionConfig] = None
    # data type: ValidationRapidSelectionConfig
    oneof_schema_7_validator: Optional[ValidationRapidSelectionConfig] = None
    actual_instance: Optional[Union[ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig]] = None
    one_of_schemas: Set[str] = { "ConditionalValidationRapidSelectionConfig", "CorrelatedRapidSelectionConfig", "DemographicRapidSelectionConfig", "NoValidationWorkflowRapidSelectionConfig", "OnlyValidationWorkflowRapidSelectionConfig", "StaticRapidSelectionConfig", "ValidationRapidSelectionConfig" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CompareWorkflowConfigRapidSelectionConfigsInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: ConditionalValidationRapidSelectionConfig
        if not isinstance(v, ConditionalValidationRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConditionalValidationRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: CorrelatedRapidSelectionConfig
        if not isinstance(v, CorrelatedRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CorrelatedRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: DemographicRapidSelectionConfig
        if not isinstance(v, DemographicRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DemographicRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: NoValidationWorkflowRapidSelectionConfig
        if not isinstance(v, NoValidationWorkflowRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NoValidationWorkflowRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: OnlyValidationWorkflowRapidSelectionConfig
        if not isinstance(v, OnlyValidationWorkflowRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OnlyValidationWorkflowRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: StaticRapidSelectionConfig
        if not isinstance(v, StaticRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StaticRapidSelectionConfig`")
        else:
            match += 1
        # validate data type: ValidationRapidSelectionConfig
        if not isinstance(v, ValidationRapidSelectionConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValidationRapidSelectionConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CompareWorkflowConfigRapidSelectionConfigsInner with oneOf schemas: ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CompareWorkflowConfigRapidSelectionConfigsInner with oneOf schemas: ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ConditionalValidationRapidSelectionConfig
        try:
            instance.actual_instance = ConditionalValidationRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CorrelatedRapidSelectionConfig
        try:
            instance.actual_instance = CorrelatedRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DemographicRapidSelectionConfig
        try:
            instance.actual_instance = DemographicRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NoValidationWorkflowRapidSelectionConfig
        try:
            instance.actual_instance = NoValidationWorkflowRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OnlyValidationWorkflowRapidSelectionConfig
        try:
            instance.actual_instance = OnlyValidationWorkflowRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StaticRapidSelectionConfig
        try:
            instance.actual_instance = StaticRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValidationRapidSelectionConfig
        try:
            instance.actual_instance = ValidationRapidSelectionConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CompareWorkflowConfigRapidSelectionConfigsInner with oneOf schemas: ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CompareWorkflowConfigRapidSelectionConfigsInner with oneOf schemas: ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ConditionalValidationRapidSelectionConfig, CorrelatedRapidSelectionConfig, DemographicRapidSelectionConfig, NoValidationWorkflowRapidSelectionConfig, OnlyValidationWorkflowRapidSelectionConfig, StaticRapidSelectionConfig, ValidationRapidSelectionConfig]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


